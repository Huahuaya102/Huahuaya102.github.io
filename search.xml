<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>力扣--贪心算法</title>
      <link href="/2022/04/06/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
      <url>/2022/04/06/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>本章是关于贪心算法的力扣刷题笔记。</p><h2 id="贪心算法的理论基础"><a href="#贪心算法的理论基础" class="headerlink" title="贪心算法的理论基础"></a>贪心算法的理论基础</h2><h3 id="贪心算法的思想"><a href="#贪心算法的思想" class="headerlink" title="贪心算法的思想"></a>贪心算法的思想</h3><p>贪心算法并不从整体最优考虑，它所作出的选择只是在某种意义上的局部最优选择。虽然贪心算法不能对所有问题都得到整体最优解，但是对许多问题它能产生整体最优解。</p><h3 id="贪心算法的基本要素："><a href="#贪心算法的基本要素：" class="headerlink" title="贪心算法的基本要素："></a>贪心算法的基本要素：</h3><p>(1)贪心选择性质：是指所求问题的整体最优解可以通过一系列局部最优的选择，即贪心选择来达到。这是贪心算法可行的第一个基本要素，也是贪心算法与动态规划算法的主要区别。贪心算法通常以自顶向下的方式进行，以迭代的方式做出相继的贪心选择，每做一次贪心选择就将所求问题简化为规模更小的子问题。<br>(2)当一个问题的最优解包含其子问题的最优解时，称此问题具有最优及结构性质。问题的最优子结构性质是该问题可以用动态规划算法或贪心算法求解的关键特征。</p><h3 id="贪心算法的解题步骤"><a href="#贪心算法的解题步骤" class="headerlink" title="贪心算法的解题步骤"></a>贪心算法的解题步骤</h3><p>从问题的某一个初始解出发逐步逼近给定的目标，以尽可能快地求更好的解。当达到算法中的某一步不能再继续前进时，算法停止。<br>(1) 将问题分解为若干个子问题<br>(2) 找到合适的贪心策略<br>(3) 求解每一个子问题的最优解<br>(4) 将局部最优解堆叠成全局最优解</p><h2 id="2022年4月6日刷题笔记"><a href="#2022年4月6日刷题笔记" class="headerlink" title="2022年4月6日刷题笔记"></a>2022年4月6日刷题笔记</h2><h3 id="分发饼干"><a href="#分发饼干" class="headerlink" title="分发饼干"></a>分发饼干</h3><p>题目描述：假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是每个孩子最多只能给一块饼干。对每个孩子i，都有一个胃口值g[i]，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干j，都有一个尺寸s[j]。如果s[j] &gt;&#x3D; g[i]，我们就可以将这个饼干j分配给孩子i，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 用尺寸最大的饼干满足胃口值最大的孩子</span><br><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    int findContentChildren(vector&lt;int&gt;&amp; g, vector&lt;int&gt;&amp; s)</span><br><span class="line">    &#123;</span><br><span class="line">        sort(g.begin(), g.end());</span><br><span class="line">        sort(s.begin(), s.end());</span><br><span class="line">        int slen = s.size() - 1;   // 饼干数组的下标</span><br><span class="line">        int length = 0;</span><br><span class="line">        for(int i = g.size() - 1; i &gt;= 0; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            if(slen &gt;= 0 &amp;&amp; g[i] &lt;= s[slen])  // 尺寸最大的饼干满足胃口最大的孩子</span><br><span class="line">            &#123;</span><br><span class="line">                length++;</span><br><span class="line">                slen--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="摆动序列"><a href="#摆动序列" class="headerlink" title="摆动序列"></a>摆动序列</h3><p>题目描述：如果数字之间的差严格地在正数和负数之间交替，则数字序列成为摆动序列。第一个差（如果存在的话）可能是正数或负数。仅有一个元素或者两个不等元素的序列也视为摆动序列。子序列可以通过从原始序列中删除一些（也可以不删除）元素来获得，剩下的元素保持其原始顺序。给你一个整数数组nums，返回nums中做为摆动序列的最长序列的长度。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 局部最优：删除单调坡度上的节点（不包括单调坡度两端的节点），那么这个坡度就可以有两个局部峰值</span><br><span class="line">// 整体最优：整个序列有最多的峰值，从而达到最长摆动序列</span><br><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    int wiggleMaxLength(vector&lt;int&gt;&amp; nums)</span><br><span class="line">    &#123;</span><br><span class="line">        if(nums.size() &lt;= 1) return nums.size();  // 仅有一个元素或两个不等元素的序列也视为摆动序列</span><br><span class="line">        int curdiff = 0;   // 当前一对差值</span><br><span class="line">        int prediff = 0;   // 前一对差值</span><br><span class="line">        int length = 1;    // 记录结果，序列默认最左边有一个峰值</span><br><span class="line">        for(int i = 1; i &lt; nums.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            curdiff = nums[i] - nums[i - 1];</span><br><span class="line">            if((curdiff &gt; 0 &amp;&amp; prediff &lt;= 0) || (curdiff &lt; 0 &amp;&amp; prediff &gt;= 0))</span><br><span class="line">            &#123;</span><br><span class="line">                length++;</span><br><span class="line">                prediff = curdiff;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="最大子数组和"><a href="#最大子数组和" class="headerlink" title="最大子数组和"></a>最大子数组和</h3><p>题目描述：给你一个整数数组nums，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最最大和。子数组是数组中的一个连续部分。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    int maxSubArray(vector&lt;int&gt;&amp; nums)</span><br><span class="line">    &#123;</span><br><span class="line">        if(nums.size() == 1) return nums[0];</span><br><span class="line">        int maxresult = INT32_MIN;</span><br><span class="line">        int result = 0;</span><br><span class="line">        for(int i = 0; i &lt; nums.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            result += nums[i];  </span><br><span class="line">            if(result &gt; maxresult)</span><br><span class="line">            &#123;</span><br><span class="line">                maxresult = result;  // 取区间累计最大值（相当于不断确定最大子序终止位置）</span><br><span class="line">            &#125;</span><br><span class="line">            if(result &lt; 0) result = 0; // 相当于重置最大子序起始位置，因为负数会拉低总和</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="买卖股票的最佳时机II"><a href="#买卖股票的最佳时机II" class="headerlink" title="买卖股票的最佳时机II"></a>买卖股票的最佳时机II</h3><p>题目描述：给定一个数组prices，其中prices[i]表示股票第i天的价格。在每一天，你可能会决定购买或出售股票。你在任何时候最多只能持有一股股票。你也可以购买它，然后在同一天出售。返回你能获得的最大利润。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    int maxProfit(vector&lt;int&gt;&amp; prices)</span><br><span class="line">    &#123;</span><br><span class="line">        int maxresult = 0;</span><br><span class="line">        int result;</span><br><span class="line">        for(int i = 1; i &lt; prices.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            result = max(prices[i] - prices[i - 1], 0);</span><br><span class="line">            maxresult += result;</span><br><span class="line">        &#125;</span><br><span class="line">        return maxresult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2022年4月7日刷题笔记"><a href="#2022年4月7日刷题笔记" class="headerlink" title="2022年4月7日刷题笔记"></a>2022年4月7日刷题笔记</h2><h3 id="买卖股票的最佳时机"><a href="#买卖股票的最佳时机" class="headerlink" title="买卖股票的最佳时机"></a>买卖股票的最佳时机</h3><p>题目描述：给定一个数组prices，它的第i个元素prices[i]表示一支股票第i天的价格。你只能选择某一天买入这只股票，并选择在未来的某一天卖出该股票。设计一个算法来计算你所能收获的最大利润。返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回0。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    int maxProfit(vector&lt;int&gt;&amp; prices)</span><br><span class="line">    &#123;</span><br><span class="line">        int maxprice = 0;</span><br><span class="line">        int minprice = prices[0];</span><br><span class="line">        for(int i = 1; i &lt; prices.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            maxprice = max(maxprice, prices[i] - minprice);</span><br><span class="line">            minprice = min(minprice, prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        return maxprice;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="跳跃游戏"><a href="#跳跃游戏" class="headerlink" title="跳跃游戏"></a>跳跃游戏</h3><p>题目描述：给定一个非负整数数组nums，你最初位于数组的第一个下标。数组中的每个元素代表你在该位置可以跳跃的最大长度。判断你是否能够到达最后一个下标。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    bool canJump(vector&lt;int&gt;&amp; nums)</span><br><span class="line">    &#123;</span><br><span class="line">        int cover = nums[0];</span><br><span class="line">        if(nums.size() == 1) return true;  // 数组长度为1，可以到达</span><br><span class="line">        for(int i = 1; i &lt; cover; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cover = max(cover, nums[i] + i);  </span><br><span class="line">            if(cover &gt;= nums.size() - 1) return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="跳跃游戏II"><a href="#跳跃游戏II" class="headerlink" title="跳跃游戏II"></a>跳跃游戏II</h3><p>题目描述：给你一个非负整数数组nums ，你最初位于数组的第一个位置。数组中的每个元素代表你在该位置可以跳跃的最大长度。你的目标是使用最少的跳跃次数到达数组的最后一个位置。假设你总是可以到达数组的最后一个位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    int jump(vector&lt;int&gt;&amp; nums)</span><br><span class="line">    &#123;</span><br><span class="line">        int count = 0;   // 统计跳跃次数</span><br><span class="line">        int longest = 0; // 记录每个位置可以跳跃的最大长度</span><br><span class="line">        int end = 0;  // 记录是否跳至对应位置</span><br><span class="line">        if(nums.size() == 1) return count;</span><br><span class="line">        for(int i = 0; i &lt; nums.size() - 1; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            longest = max(longest, nums[i] + i);</span><br><span class="line">            if(end == i)  // 完成一次跳跃</span><br><span class="line">            &#123;</span><br><span class="line">                count++;</span><br><span class="line">                end = longest;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="K次取反后最大化的数组和"><a href="#K次取反后最大化的数组和" class="headerlink" title="K次取反后最大化的数组和"></a>K次取反后最大化的数组和</h3><p>题目描述：给你一个整数数组nums和一个整数k，按以下方法修改该数组：选择某个下标i并将nums[i]替换为-nums[i] 。重复这个过程恰好k次。可以多次选择同一个下标i 。以这种方式修改数组后，返回数组可能的最大和。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    static bool cmp(int a, int b)</span><br><span class="line">    &#123;</span><br><span class="line">        return abs(a) &gt; abs(b);   // 绝对值大的返回true</span><br><span class="line">    &#125;</span><br><span class="line">    int largestSumAfterKNegations(vector&lt;int&gt;&amp; nums, int k)</span><br><span class="line">    &#123;</span><br><span class="line">        sort(nums.begin(), nums.end(), cmp);  // 将nums按照绝对值大小从大到小排序</span><br><span class="line">        for(int i = 0; i &lt; nums.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(nums[i] &lt; 0 &amp;&amp; k &gt; 0)  // 存在负数且k&gt;0</span><br><span class="line">            &#123;</span><br><span class="line">                nums[i] *= -1;   // 将负数转换为正数</span><br><span class="line">                k--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(k % 2 == 1) nums[nums.size() - 1] *= -1;  // k仍然大于0，将最小的元素进行反转</span><br><span class="line">        int sumresult = 0;</span><br><span class="line">        for(int num : nums) sumresult += num;</span><br><span class="line">        return sumresult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2022年4月8日刷题笔记"><a href="#2022年4月8日刷题笔记" class="headerlink" title="2022年4月8日刷题笔记"></a>2022年4月8日刷题笔记</h2><h3 id="加油站"><a href="#加油站" class="headerlink" title="加油站"></a>加油站</h3><p>题目描述：在一条环路上有n个加油站，其中第i个加油站有汽油gas[i]升。你有一辆油箱容量无限的的汽车，从第i个加油站开往第 i+1个加油站需要消耗汽油cost[i]升。你从其中的一个加油站出发，开始时油箱为空。给定两个整数数组gas和cost如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回-1。如果存在解，则保证它是唯一的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">// 暴力法:超过时间限制</span><br><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    int canCompleteCircuit(vector&lt;int&gt;&amp; gas, vector&lt;int&gt;&amp; cost)</span><br><span class="line">    &#123;</span><br><span class="line">        for(int i = 0; i &lt; cost.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            int rest = gas[i] - cost[i];   // 记录剩余油量</span><br><span class="line">            int j = (i + 1) % cost.size();</span><br><span class="line">            while(rest &gt; 0 &amp;&amp; j != i)      // 以i为起点，模拟行驶一圈</span><br><span class="line">            &#123;</span><br><span class="line">                rest += gas[j] - cost[j];</span><br><span class="line">                j = (j + 1) % cost.size();</span><br><span class="line">            &#125; </span><br><span class="line">            if(rest &gt;= 0 &amp;&amp; j == i) return i;  // 如果剩余油量大于等于0，且以i为起点，返回i</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">// 贪心算法</span><br><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    int canCompleteCircuit(vector&lt;int&gt;&amp; gas, vector&lt;int&gt;&amp; cost)</span><br><span class="line">    &#123;</span><br><span class="line">        int currestsum = 0;  // 记录当前剩余油量总和</span><br><span class="line">        int mingas = INT_MAX; // 记录从起点出发，油箱里油量的最小值</span><br><span class="line">        for(int i = 0; i &lt; gas.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            int rest = gas[i] - cost[i];</span><br><span class="line">            currestsum += rest;</span><br><span class="line">            if(currestsum &lt; mingas)</span><br><span class="line">            &#123;</span><br><span class="line">                mingas = currestsum;   // 更新mingas</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(currestsum &lt; 0) return -1;  // gas的油量总和小于cost的油量总和，无论从哪个位置出发，都不会完成一圈的行驶</span><br><span class="line">        if(mingas &gt;= 0) return 0;     // 从位置0出发，剩余油量的累加过程始终大于0，即油未断过，返回位置0</span><br><span class="line">        for(int i = gas.size() - 1; i &gt;= 0; i--)  // mingas&lt;0, 需要从非0位置出发，从向前遍历，一旦mingas&gt;0,则返回i</span><br><span class="line">        &#123;</span><br><span class="line">            int rest = gas[i] -cost[i];</span><br><span class="line">            mingas += rest;</span><br><span class="line">            if(mingas &gt;= 0)</span><br><span class="line">            &#123;</span><br><span class="line">                return i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="分发糖果"><a href="#分发糖果" class="headerlink" title="分发糖果"></a>分发糖果</h3><p>题目描述：n个孩子站成一排。给你一个整数数组ratings表示每个孩子的评分。你需要按照一下要求，给这些孩子分发糖果：每个孩子至少分配到1个糖果，相邻两个孩子评分更高的孩子会获得更多的糖果。请你给每个孩子分发糖果，计算并返回需要准备的最少糖果数目。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    int candy(vector&lt;int&gt;&amp; ratings)</span><br><span class="line">    &#123;</span><br><span class="line">        vector&lt;int&gt; candys(ratings.size(), 1);  // 先给每个孩子分配一个糖果</span><br><span class="line">        for(int i = 1; i &lt; ratings.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(ratings[i] &gt; ratings[i - 1]) // 右边孩子的评分 &gt; 左边孩子的评分</span><br><span class="line">            &#123;</span><br><span class="line">                candys[i] = candys[i - 1] + 1;  // 右边孩子的糖果数量 = 左边孩子的糖果数量+ 1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i = ratings.size() - 2; i &gt;= 0; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            if(ratings[i] &gt; ratings[i + 1]) // 左边孩子的评分 &gt; 右边孩子的评分</span><br><span class="line">            &#123;</span><br><span class="line">                candys[i] = max(candys[i + 1] + 1, candys[i]); // 左边孩子的糖果数量 = max(右边孩子的糖果数量 + 1， 当前位置糖果数量)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        int sumcandy = 0;</span><br><span class="line">        for(int num : candys) sumcandy += num;</span><br><span class="line">        return sumcandy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="柠檬水找零"><a href="#柠檬水找零" class="headerlink" title="柠檬水找零"></a>柠檬水找零</h3><p>题目描述：在柠檬水摊上，每一杯柠檬水的售价为5美元。顾客排队购买你的产品，（按账单bills支付的顺序）一次购买一杯。每位顾客只买一杯柠檬水，然后向你付 5美元、10美元或20美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付5美元。注意，一开始你手头没有任何零钱。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    bool lemonadeChange(vector&lt;int&gt;&amp; bills)</span><br><span class="line">    &#123;</span><br><span class="line">        int numfive = 0;   // 统计5元的个数</span><br><span class="line">        int numten = 0;    // 统计10元的个数</span><br><span class="line">        int numtwenty = 0; // 统计20元的个数</span><br><span class="line">        for(int bill : bills)  </span><br><span class="line">        &#123;</span><br><span class="line">            if(bill == 5)   // 收到5元，不需要找零</span><br><span class="line">            &#123;</span><br><span class="line">                numfive++;</span><br><span class="line">            &#125;</span><br><span class="line">            if(bill == 10) // 收到10元，需要找零5元</span><br><span class="line">            &#123;</span><br><span class="line">                if(numfive == 0) return false;  // 没有5元，返回false</span><br><span class="line">                numfive--;</span><br><span class="line">                numten++;</span><br><span class="line">            &#125;</span><br><span class="line">            if(bill == 20) // 收到20元，需要找零 10+5 或 3个5元</span><br><span class="line">            &#123;</span><br><span class="line">                if(numfive &gt; 0 &amp;&amp; numten &gt; 0)</span><br><span class="line">                &#123;</span><br><span class="line">                    numfive--;</span><br><span class="line">                    numten--;</span><br><span class="line">                    numtwenty++;</span><br><span class="line">                &#125;</span><br><span class="line">                else if(numfive &gt;= 3)</span><br><span class="line">                &#123;</span><br><span class="line">                    numfive -= 3;</span><br><span class="line">                    numtwenty++;</span><br><span class="line">                &#125;</span><br><span class="line">                else</span><br><span class="line">                &#123;</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="根据身高重建队列"><a href="#根据身高重建队列" class="headerlink" title="根据身高重建队列"></a>根据身高重建队列</h3><p>题目描述：假设有打乱顺序的一群人站成一个队列，数组people表示队列中一些人的属性（不一定按顺序）。每个people[i] &#x3D; [hi, ki] 表示第i个人的身高为hi，前面正好有ki个身高大于或等于 hi 的人。请你重新构造并返回输入数组people所表示的队列。返回的队列应该格式化为数组queue，其中queue[j] &#x3D; [hj, kj] 是队列中第j个人的属性（queue[0] 是排在队列前面的人）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    static bool cmp(vector&lt;int&gt;&amp; a, vector&lt;int&gt;&amp; b)  // 定义排序的规则</span><br><span class="line">    &#123;</span><br><span class="line">        if(a[0] == b[0]) return a[1] &lt; b[1];</span><br><span class="line">        return a[0] &gt; b[0];</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; reconstructQueue(vector&lt;vector&lt;int&gt;&gt;&amp; people)</span><br><span class="line">    &#123;</span><br><span class="line">        sort(people.begin(), people.end(), cmp); // 按照身高进行排序，从大到小排，身高相同的话，k小的人站在前面</span><br><span class="line">        vector&lt;vector&lt;int&gt;&gt; que;</span><br><span class="line">        for(int i = 0; i &lt; people.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            int index = people[i][1];  // k值</span><br><span class="line">            que.insert(que.begin() + index, people[i]);  // 按照k的值进行插入</span><br><span class="line">        &#125;</span><br><span class="line">        return que;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="无重叠区间"><a href="#无重叠区间" class="headerlink" title="无重叠区间"></a>无重叠区间</h3><p>题目描述：给定一个区间的集合intervals，其中intervals[i]&#x3D;[starti, endi]，返回需要移除区间的最小数量，使剩余区间互不重叠。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    static bool cmp(vector&lt;int&gt;&amp; a, vector&lt;int&gt;&amp; b)  // 按照区间的右边界进行排序</span><br><span class="line">    &#123;</span><br><span class="line">        return a[1] &lt; b[1];</span><br><span class="line">    &#125;</span><br><span class="line">    int eraseOverlapIntervals(vector&lt;vector&lt;int&gt;&gt;&amp; intervals)</span><br><span class="line">    &#123;</span><br><span class="line">        if(intervals.size() == 0) return 0;</span><br><span class="line">        sort(intervals.begin(), intervals.end(), cmp);</span><br><span class="line">        int count = 1;              // 记录符合要求的边界点的数量</span><br><span class="line">        int end = intervals[0][1];  // 记录分割节点</span><br><span class="line">        for(int i = 1; i &lt; intervals.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(end &lt;= intervals[i][0])</span><br><span class="line">            &#123;</span><br><span class="line">                end = intervals[i][1];</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return intervals.size() - count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="划分字母区间"><a href="#划分字母区间" class="headerlink" title="划分字母区间"></a>划分字母区间</h3><p>题目描述：字符串s由小写字母组成。我们要把这个字符串划分为尽可能多的片段，同一字母最多出现在同一片段中。返回一个表示每个字符串片段的长度的列表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; partitionLabels(string s)</span><br><span class="line">    &#123;</span><br><span class="line">        int index[27] = &#123;0&#125;;  // 定义一个数组，存储每个字符在s中的最后位置</span><br><span class="line">        for(int i = 0; i &lt;s.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            index[s[i] - &#x27;a&#x27;] = i;  // 记录字符出现的最后位置</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;int&gt; result;  // 存放最后的结果</span><br><span class="line">        int left = 0; // 左边界</span><br><span class="line">        int right = 0; // 右边界</span><br><span class="line">        for(int i = 0; i &lt; s.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            right = max(right, index[s[i] - &#x27;a&#x27;]);  // 字符出现的最后位置</span><br><span class="line">            if(right == i)</span><br><span class="line">            &#123;</span><br><span class="line">                result.push_back(right - left + 1);   // 将切断的长度存入result</span><br><span class="line">                left = i + 1;  // 更新左边界</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="合并区间"><a href="#合并区间" class="headerlink" title="合并区间"></a>合并区间</h3><p>题目描述：以数组intervals表示若干个区间的集合，其中单个区间为intervals[i]&#x3D;[starti, endi]。请你合并所有重叠区间，并返回一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    static bool cmp(vector&lt;int&gt;&amp; a, vector&lt;int&gt;&amp; b)  // 按照数组的左边界进行排序</span><br><span class="line">    &#123;</span><br><span class="line">        return a[0] &lt; b[0];</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; merge(vector&lt;vector&lt;int&gt;&gt;&amp; intervals) </span><br><span class="line">    &#123;</span><br><span class="line">        vector&lt;vector&lt;int&gt;&gt; result;  // 存储结果</span><br><span class="line">        if(intervals.size() == 0) return result;</span><br><span class="line">        sort(intervals.begin(), intervals.end(), cmp); // 将数组按照左边界从小到大排序</span><br><span class="line">        bool flag = false;  // 用来标记最后一个数组是否被合并</span><br><span class="line">        for(int i = 1; i &lt; intervals.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            int left = intervals[i - 1][0];  // 记录起始的左边界</span><br><span class="line">            int right = intervals[i - 1][1]; // 记录起始的右边界</span><br><span class="line">            while(i &lt; intervals.size() &amp;&amp; intervals[i][0] &lt;= right)  // 当前区间的左边界小于前一个区间的右边界，需要合并</span><br><span class="line">            &#123;</span><br><span class="line">                right = max(right, intervals[i][1]);  // 更新右区间</span><br><span class="line">                if(i == intervals.size() - 1) flag = true;   // 最后一个数组区间也被合并</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            result.push_back(&#123;left, right&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        if(flag == false) // 最后一个数组没有被合并</span><br><span class="line">        &#123;</span><br><span class="line">            result.push_back(&#123;intervals[intervals.size() - 1][0], intervals[intervals.size() - 1][1]&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        return result;       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="买卖股票的最佳实际含手续费"><a href="#买卖股票的最佳实际含手续费" class="headerlink" title="买卖股票的最佳实际含手续费"></a>买卖股票的最佳实际含手续费</h3><p>题目描述：给定一个整数数组prices，其中prices[i]表示第i天的股票价格；整数fee代表了交易股票的手续费用。你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。返回获得利润的最大值。注意：这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// 买入时间：遇到更低点，即做为买入的时间</span><br><span class="line">// 卖出时间：当前价格大于最低价格+手续费，即可做为卖出时间</span><br><span class="line">// 情况一：收获利润的时间并不是收获利润区间里的最终时间，后面还可以继续收获利润</span><br><span class="line">// 情况二：前一天是收获利润区间里的最后一天，真正卖出</span><br><span class="line">// 情况三：不做操作，保持原有的操作</span><br><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    int maxProfit(vector&lt;int&gt;&amp; prices, int fee)</span><br><span class="line">    &#123;</span><br><span class="line">        int profits = 0;</span><br><span class="line">        int minprice = prices[0];  // 将第一天的股票价格做为最小价格</span><br><span class="line">        for(int i = 0; i &lt; prices.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(prices[i] &lt; minprice) minprice = prices[i];  // 更新股票的最小价格</span><br><span class="line">            if(prices[i] &gt;= minprice &amp;&amp; prices[i] &lt;= minprice + fee) // 当前股票价格大于最小价格，但是无法支付手续费，不做任何操作</span><br><span class="line">            &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            if(prices[i] &gt; minprice + fee)  // 当前价格大于最小价格，且支付得起手续费</span><br><span class="line">            &#123;</span><br><span class="line">                profits += prices[i] - minprice - fee;</span><br><span class="line">                minprice = prices[i] - fee;  // 重新开始记录最小价格</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return profits;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>力扣--回溯算法</title>
      <link href="/2022/04/01/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
      <url>/2022/04/01/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>本章是关于回溯算法的力扣刷题笔记。</p><h2 id="回溯算法理论基础"><a href="#回溯算法理论基础" class="headerlink" title="回溯算法理论基础"></a>回溯算法理论基础</h2><p>回溯法也可以称作回溯搜索法，它是一种搜索的方式。<br>回溯法一般可以解决以下几类问题：<br>(1) 组合问题：N个数里面按照一定规则找出K个数的集合；<br>(2) 切割问题：一个字符串按照一定规则有几种切割方式；<br>(3) 子集问题：一个N个数的集合里有多少个符合条件的子集；<br>(4) 排列问题：N个数按照一定规则全排列，有几种排列方式；<br>(5) 棋盘问题：N皇后，解数独等。<br>回溯法解决的问题都可以抽象为树形结构。回溯法解决的都是在集合中递归查找子集，集合的大小就构成了树的宽度，递归的深度构成树的深度。<br>回溯法模板（注意：改模板来自于代码随想录）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 回溯函数模板返回值以及参数：回溯函数中函数返回值一般为void，参数的确定一般在逻辑写好之后</span><br><span class="line">void backtrack(参数)</span><br><span class="line">&#123;</span><br><span class="line">    if(终止条件)  // 回溯函数终止条件:找到满足条件的一条答案，将答案存储起来，本结束本层递归</span><br><span class="line">    &#123;</span><br><span class="line">        存放结果;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    // 回溯搜索的遍历过程 for循环：横向遍历，递归：纵向遍历</span><br><span class="line">    for(选择; 本层集合中元素(树中结点孩子的数量就是集合的大小)) </span><br><span class="line">    &#123;</span><br><span class="line">        处理结点;</span><br><span class="line">        backtrack(路径, 选择列表);   // 递归</span><br><span class="line">        回溯,撤销处理结果</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回溯法剪枝的精髓：for循环在寻找起点的时候要有一份范围，如果这个起点到集合终止之间的元素不够，题目要求的是k个元素，就没有必要搜索了。</p><h2 id="2022年4月1日刷题笔记"><a href="#2022年4月1日刷题笔记" class="headerlink" title="2022年4月1日刷题笔记"></a>2022年4月1日刷题笔记</h2><h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><p>题目描述：给定两个整数n和k，返回范围[1,n]中所有可能的k个数的组合，你可以按照任何顺序返回答案。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// 抽象为树结构：k表示深度，n表示宽度</span><br><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; result;</span><br><span class="line">    vector&lt;int&gt; vec;</span><br><span class="line">    void back(int n, int k, int start)</span><br><span class="line">    &#123;</span><br><span class="line">    if(vec.size() == k)</span><br><span class="line">    &#123;</span><br><span class="line">    result.push_back(vec);  // 到达最底部</span><br><span class="line">    return;</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i = start; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">    vec.push_back(i);</span><br><span class="line">    back(n, k, i + 1);</span><br><span class="line">    vec.pop_back();</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; combine(int n, int k)</span><br><span class="line">    &#123;</span><br><span class="line">    result.clear();</span><br><span class="line">    vec.clear();</span><br><span class="line">    back(n, k, 1);</span><br><span class="line">    return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2022年4月2日刷题笔记"><a href="#2022年4月2日刷题笔记" class="headerlink" title="2022年4月2日刷题笔记"></a>2022年4月2日刷题笔记</h2><h3 id="组合总和III"><a href="#组合总和III" class="headerlink" title="组合总和III"></a>组合总和III</h3><p>题目描述：找出所有相加之和为n的k个数的组合，且满足下列条件：只使用数字1到9，每个数字至多使用一次。返回所有可能的有效组合的列表，该列表不能包含相同的组合两次，组合可以以任何顺序返回。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// 采用回溯法</span><br><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; result;   // 存放最终的结果</span><br><span class="line">    vector&lt;int&gt; eachpath;         // 存放每个路径符合条件的结果</span><br><span class="line">    void backtrack(int k, int n, int first)</span><br><span class="line">    &#123;</span><br><span class="line">        if(eachpath.size() == k)  // 终止条件</span><br><span class="line">        &#123;</span><br><span class="line">            if(n == 0) result.push_back(eachpath);</span><br><span class="line">            return;    // 到达叶子结点，但是不符合条件，直接返回</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i = 1; i &lt;= 9; i++)  // 横向操作</span><br><span class="line">        &#123;</span><br><span class="line">            n -= i;</span><br><span class="line">            eachpath.push_back(i);</span><br><span class="line">            backtrack(k, n, i + 1);  // 递归：纵向操作</span><br><span class="line">            n += i;                  // 回溯</span><br><span class="line">            eachpath.pop_back();     // 回溯</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; combinationSum3(int k, int n)</span><br><span class="line">    &#123;</span><br><span class="line">        result.clear();</span><br><span class="line">        eachpath.clear();</span><br><span class="line">        backtrack(k, n, 1);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="组合总和"><a href="#组合总和" class="headerlink" title="组合总和"></a>组合总和</h3><p>题目描述：给你一个无重复元素的整数数组candidates和一个目标整数target，找出candidates中可以使数字和为目标数target的所有不同组合并以列表形式返回。你可以按任意顺序返回这些组合。candidates中的同一个 数字可以无限制重复被选取 。如果至少一个数字的被选数量不同，则两种组合是不同的。对于给定的输入，保证和为target 的不同组合数少于 150 个。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; result;</span><br><span class="line">    vector&lt;int&gt; eachpath;</span><br><span class="line">    void backtrack(const vector&lt;int&gt;&amp; candidates, int target, int k)</span><br><span class="line">    &#123;</span><br><span class="line">        if(target &lt; 0) return;</span><br><span class="line">        if(target == 0)</span><br><span class="line">        &#123;</span><br><span class="line">            result.push_back(eachpath);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i = k; i &lt; candidates.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            target -= candidates[i];</span><br><span class="line">            eachpath.push_back(candidates[i]);</span><br><span class="line">            backtrack(candidates, target, i);   // 同一个数字可以被无限选取</span><br><span class="line">            target += candidates[i];</span><br><span class="line">            eachpath.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; combinationSum(vector&lt;int&gt;&amp; candidates, int target)</span><br><span class="line">    &#123;</span><br><span class="line">        result.clear();</span><br><span class="line">        eachpath.clear();</span><br><span class="line">        backtrack(candidates, target, 0);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="组合总和II"><a href="#组合总和II" class="headerlink" title="组合总和II"></a>组合总和II</h3><p>题目描述：给定一个候选人编号的集合candidates和一个目标数target，找出candidates中所有可以使数字和为target的组合。candidates中的每个数字在每个组合中只能使用一次。注意：解集不能包含重复的组合。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">// 回溯法：本题涉及到去重的问题</span><br><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; result;</span><br><span class="line">    vector&lt;int&gt; eachpath;</span><br><span class="line">    void backtrack(const vector&lt;int&gt;&amp; candidates, int target, int k)</span><br><span class="line">    &#123;</span><br><span class="line">        if(target &lt; 0) return;</span><br><span class="line">        if(target == 0)</span><br><span class="line">        &#123;</span><br><span class="line">            result.push_back(eachpath);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i = k; i &lt; candidates.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(i &gt; k &amp;&amp; candidates[i] == candidates[i - 1])</span><br><span class="line">            &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            target -= candidates[i];</span><br><span class="line">            eachpath.push_back(candidates[i]);</span><br><span class="line">            backtrack(candidates, target, i + 1);</span><br><span class="line">            target += candidates[i];</span><br><span class="line">            eachpath.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; combinationSum2(vector&lt;int&gt;&amp; candidates, int target)</span><br><span class="line">    &#123;</span><br><span class="line">        result.clear();</span><br><span class="line">        eachpath.clear();</span><br><span class="line">        sort(candidates.begin(), candidates.end());</span><br><span class="line">        backtrack(candidates, target, 0);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="电话号码的字母组合"><a href="#电话号码的字母组合" class="headerlink" title="电话号码的字母组合"></a>电话号码的字母组合</h3><p>题目描述：给定一个仅包含数字2-9的字符串，返回它所有能表示的字母组合，答案可以以任意顺序返回。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// 回溯法</span><br><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    // 构建数组表示映射关系： 0 1 2 3 4 5 6 7 8 9</span><br><span class="line">    const string  mapping[10] = &#123;&quot;&quot;, &quot;&quot;, &quot;abc&quot;, &quot;def&quot;, &quot;ghi&quot;, &quot;jkl&quot;, &quot;mno&quot;, &quot;pqrs&quot;, &quot;tuv&quot;, &quot;wxyz&quot;,&#125;;</span><br><span class="line">    vector&lt;string&gt; result;  // 存放结果</span><br><span class="line">    string eachs;           // 每个符合条件的结果</span><br><span class="line">    void backtrack(int k, const string&amp; digits)  </span><br><span class="line">    &#123;</span><br><span class="line">        if(k == digits.size()) // digits的长度==k</span><br><span class="line">        &#123;</span><br><span class="line">            result.push_back(eachs);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        int digit = digits[k] - &#x27;0&#x27;; // 读取第k个字符，并将字符转换为int型，</span><br><span class="line">        string maps = mapping[digit]; // 取int对应的字符串</span><br><span class="line">        for(int i = 0; i &lt; maps.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            eachs.push_back(maps[i]);</span><br><span class="line">            backtrack(k + 1， digits);</span><br><span class="line">            eachs.pop_back();   // 回溯</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;string&gt; letterCombinations(string digits)</span><br><span class="line">    &#123;</span><br><span class="line">        result.clear();</span><br><span class="line">        eachs.clear();</span><br><span class="line">        if(digits.size() == 0) return result;</span><br><span class="line">        backtrack(0, digits);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2022年4月3日刷题笔记（补卡）"><a href="#2022年4月3日刷题笔记（补卡）" class="headerlink" title="2022年4月3日刷题笔记（补卡）"></a>2022年4月3日刷题笔记（补卡）</h2><h3 id="分割回文串"><a href="#分割回文串" class="headerlink" title="分割回文串"></a>分割回文串</h3><p>题目描述：给你一个字符串，请你将s分割成一些子串，使每个子串都是回文串。返回s所有可能的分割方案。回文串是正着读和反着读都是一样的字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">// 回溯</span><br><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; result;</span><br><span class="line">    vector&lt;string&gt; eachpath;</span><br><span class="line">    void backtrack(const string&amp; s, int first)</span><br><span class="line">    &#123;</span><br><span class="line">        if(first == s.size()) // 起始位置大于或等于s的长度，切割至字符串s的最后面</span><br><span class="line">        &#123;</span><br><span class="line">            result.push_back(eachpath);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i = first; i &lt; s.size(); i++)   // 是回文子串</span><br><span class="line">        &#123;</span><br><span class="line">            if(isPalindrome(s, first, i))</span><br><span class="line">            &#123;</span><br><span class="line">                string str = s.substr(first, i - first + 1);  // 截取字符串</span><br><span class="line">                eachpath.push_back(str);</span><br><span class="line">            &#125;</span><br><span class="line">            else   // 不是回文子串，跳过</span><br><span class="line">            &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            backtrack(s, i + 1);   // 寻找i+1为起始位置的子串，每次递归更新first</span><br><span class="line">            eachpath.pop_back();   // 回溯</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    bool isPalindrome(const string&amp; s, int start, int end)</span><br><span class="line">    &#123;</span><br><span class="line">        for(int i = start, j = end; i &lt; j; i++, j--)</span><br><span class="line">        &#123;</span><br><span class="line">            if(s[i] != s[j])</span><br><span class="line">            &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; partition(string s)</span><br><span class="line">    &#123;</span><br><span class="line">        result.clear();</span><br><span class="line">        eachpath.clear();</span><br><span class="line">        backtrack(s, 0);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="复原IP地址"><a href="#复原IP地址" class="headerlink" title="复原IP地址"></a>复原IP地址</h3><p>题目描述：有效IP地址正好由四个整数（每个整数位于0到255之间组成，且不能含有前导0），整数之间用’.’分隔。例如：”0.1.2.201” 和 “192.168.1.1” 是有效IP地址，但是”0.011.255.245”、”192.168.1.312” 和 “<a href="mailto:&#49;&#57;&#50;&#46;&#49;&#54;&#x38;&#x40;&#49;&#x2e;&#49;">&#49;&#57;&#50;&#46;&#49;&#54;&#x38;&#x40;&#49;&#x2e;&#49;</a>“是无效IP地址。给定一个只包含数字的字符串s ，用以表示一个IP地址，返回所有可能的有效IP地址，这些地址可以通过在s中插入’.’ 来形成。你不能重新排序或删除s中的任何数字。你可以按任何顺序返回答案。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;string&gt; result;</span><br><span class="line">    void backtrack(string&amp; s, int first, int pointNum) // fiist：搜索的起始位置；pointNum：统计插入的.的数量</span><br><span class="line">    &#123;</span><br><span class="line">        if(pointNum == 3)  // 逗号数量为3时，结束分割</span><br><span class="line">        &#123;</span><br><span class="line">            if(isValid(s, first, s.size() -1))</span><br><span class="line">            &#123;</span><br><span class="line">                result.push_back(s);</span><br><span class="line">            &#125;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i = first; i &lt; s.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(isValid(s, first, i))  // 判断[first, i]这个字段是否合法</span><br><span class="line">            &#123;</span><br><span class="line">                s.insert(s.begin() + i + 1, &#x27;.&#x27;);  // 在i的后面插入一个&#x27;.&#x27;</span><br><span class="line">                pointNum++;</span><br><span class="line">                backtrack(s, i + 2, pointNum);     // 插入&#x27;.&#x27;之后，下一个子串的起始位置为i+2</span><br><span class="line">                pointNum--;                        // 回溯</span><br><span class="line">                s.erase(s.begin() + i + 1);        // 回溯删除</span><br><span class="line">            &#125;</span><br><span class="line">            else   // 不合法，结束本层循环</span><br><span class="line">            &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    bool isValid(const string&amp; s, int start, int end)</span><br><span class="line">    &#123;</span><br><span class="line">        if(start &gt; end) return false;</span><br><span class="line">        if(s[start] == &#x27;0&#x27; &amp;&amp; start != end) return false;  // 0开始给hi的数字不合法</span><br><span class="line">        int num = 0;</span><br><span class="line">        for(int i = start; i &lt;= end; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(s[i] &gt; &#x27;9&#x27; || s[i] &lt; &#x27;0&#x27;)  // 非数字字符不合法</span><br><span class="line">            &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">            num = num * 10 + (s[i] - &#x27;0&#x27;);</span><br><span class="line">            if(num &gt; 255)    // 数字大于255不合法</span><br><span class="line">            &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;string&gt; restoreIpAddresses(string s)</span><br><span class="line">    &#123;</span><br><span class="line">        result.clear();</span><br><span class="line">        if(s.size() &gt; 12) return result;</span><br><span class="line">        backtrack(s, 0, 0);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2022年4月4日刷题笔记"><a href="#2022年4月4日刷题笔记" class="headerlink" title="2022年4月4日刷题笔记"></a>2022年4月4日刷题笔记</h2><h3 id="子集"><a href="#子集" class="headerlink" title="子集"></a>子集</h3><p>题目描述：给你一个整数数组nums，数组中的元素互不相同。返回该数组所有可能的子集（幂集）。解集不能包含重复的子集，你可以按任意顺序返回解集。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// 子集问题： 收集树结构中树的所有结点的结果</span><br><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; result;</span><br><span class="line">    vector&lt;int&gt; eachpath;</span><br><span class="line">    void backtrack(vector&lt;int&gt;&amp; nums, int start)</span><br><span class="line">    &#123;</span><br><span class="line">        result.push_back(eachpath);</span><br><span class="line">        if(start &gt;= nums.size()) return;</span><br><span class="line">        for(int i = start; i &lt; nums.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            eachpath.push_back(nums[i]);</span><br><span class="line">            backtrack(nums, i + 1);</span><br><span class="line">            eachpath.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; subsets(vector&lt;int&gt;&amp; nums)</span><br><span class="line">    &#123;</span><br><span class="line">        result.clear();</span><br><span class="line">        eachpath.clear();</span><br><span class="line">        backtrack(nums, 0);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="子集II"><a href="#子集II" class="headerlink" title="子集II"></a>子集II</h3><p>题目描述：给你一个整数数组nums，其中可能包含重复元素，请你返回该数组所有可能的子集（幂集）。解集不能包含重复的子集。返回的解集中，子集可以暗任意顺序排列。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// nums中可能含有重复的元素，但是不能包含重复的子集，需要去重</span><br><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; result;</span><br><span class="line">    vector&lt;int&gt; eachpath;</span><br><span class="line">    void backtrack(vector&lt;int&gt;&amp; nums, int start)</span><br><span class="line">    &#123;</span><br><span class="line">        result.push_back(eachpath);</span><br><span class="line">        if(start &gt;= nums.size()) return;</span><br><span class="line">        for(int i = start; i &lt; nums.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(i &gt; start &amp;&amp; nums[i] == nums[i - 1]) continue;  // 去重</span><br><span class="line">            eachpath.push_back(nums[i]);</span><br><span class="line">            backtrack(nums, i + 1);</span><br><span class="line">            eachpath.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; subsetsWithDup(vector&lt;int&gt;&amp; nums)</span><br><span class="line">    &#123;</span><br><span class="line">        result.clear();</span><br><span class="line">        eachpath.clear();</span><br><span class="line">        sort(nums.begin(), nums.end());</span><br><span class="line">        backtrack(nums, 0);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="递增子序列"><a href="#递增子序列" class="headerlink" title="递增子序列"></a>递增子序列</h3><p>题目描述：给你一个整数数组nums，找出并返回所有该数组中不同的递增子序列，递增子序列中至少有两个元素。你可以按任意顺序返回答案。数组中可能含有重复元素，如出现两个整数相等，也可以视作递增序列的一种特殊情况。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; result;</span><br><span class="line">    vector&lt;int&gt; eachpath;</span><br><span class="line">    void backtrack(vector&lt;int&gt;&amp; nums, int start)</span><br><span class="line">    &#123;</span><br><span class="line">        if(eachpath.size() &gt; 1)  // 递增序列：长度至少为2</span><br><span class="line">        &#123;</span><br><span class="line">            result.push_back(eachpath);</span><br><span class="line">        &#125;</span><br><span class="line">        int flag[201] = &#123;0&#125;;  // 题目中的nums限制在-100~100之间，去重标志</span><br><span class="line">        for(int i = start; i &lt; nums.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            // nums[i] &lt; eachpath.back() 当前值小于子序列的最后一个值</span><br><span class="line">            // flag[nums[i] + 100] == 1 为保证数组下标&gt;=0</span><br><span class="line">            if(!eachpath.empty() &amp;&amp; nums[i] &lt; eachpath.back() || flag[nums[i] + 100] == 1) continue;</span><br><span class="line">            eachpath.push_back(nums[i]);</span><br><span class="line">            flag[nums[i] + 100] = 1;  // 标记当前数值被用过</span><br><span class="line">            backtrack(nums, i + 1);</span><br><span class="line">            eachpath.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; findSubsequences(vector&lt;int&gt;&amp; nums)</span><br><span class="line">    &#123;</span><br><span class="line">        result.clear();</span><br><span class="line">        eachpath.clear();</span><br><span class="line">        backtrack(nums, 0);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h3><p>题目描述：给定一个不含重复数字的数组nums，返回其所有可能的全排列，你可以按任意顺序返回答案。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; result;</span><br><span class="line">    vector&lt;int&gt; eachpath;</span><br><span class="line">    void backtrack(vector&lt;int&gt;&amp; nums, vector&lt;bool&gt;&amp; flag)</span><br><span class="line">    &#123;</span><br><span class="line">        if(eachpath.size() == nums.size())  // 子串的长度等于nums的长度，找到一个全排列，到达叶子结点</span><br><span class="line">        &#123;</span><br><span class="line">            result.push_back(eachpath);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i = 0; i &lt; nums.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(flag[i] == true) continue;</span><br><span class="line">            eachpath.push_back(nums[i]);</span><br><span class="line">            flag[i] = true;    // 标记当前的数被用过</span><br><span class="line">            backtrack(nums, flag);</span><br><span class="line">            flag[i] = false;</span><br><span class="line">            eachpath.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; permute(vector&lt;int&gt;&amp; nums)</span><br><span class="line">    &#123;</span><br><span class="line">        result.clear();</span><br><span class="line">        eachpath.clear();</span><br><span class="line">        vector&lt;bool&gt; flag(nums.size(), false);</span><br><span class="line">        backtrack(nums, flag);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2022年4月5日刷题笔记"><a href="#2022年4月5日刷题笔记" class="headerlink" title="2022年4月5日刷题笔记"></a>2022年4月5日刷题笔记</h2><h3 id="全排列II"><a href="#全排列II" class="headerlink" title="全排列II"></a>全排列II</h3><p>题目描述：给定一个可能包含重复数字的序列nums，按任意顺序返回不重复的全排列。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; result;</span><br><span class="line">    vector&lt;int&gt; eachpath;</span><br><span class="line">    void backtrack(vector&lt;int&gt;&amp; nums, vector&lt;bool&gt;&amp; flag)</span><br><span class="line">    &#123;</span><br><span class="line">        if(eachpath.size() == nums.size())</span><br><span class="line">        &#123;</span><br><span class="line">            result.push_back(eachpath);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i = 0; i &lt; nums.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(i &gt; 0 &amp;&amp; nums[i] == nums[i - 1] &amp;&amp; flag[i - 1] == true)</span><br><span class="line">            &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            if(flag[i] == false)</span><br><span class="line">            &#123;</span><br><span class="line">                flag[i] = true;</span><br><span class="line">                eachpath.push_back(nums[i]);</span><br><span class="line">                backtrack(nums, flag);</span><br><span class="line">                flag[i] = false;</span><br><span class="line">                eachpath.pop_back();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; permuteUnique(vector&lt;int&gt;&amp; nums)</span><br><span class="line">    &#123;</span><br><span class="line">        result.clear();</span><br><span class="line">        eachpath.clear();</span><br><span class="line">        sort(nums.begin(), nums.end());</span><br><span class="line">        vector&lt;bool&gt; flag(nums.size(), false);</span><br><span class="line">        backtrack(nums, flag);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="N皇后（困难）"><a href="#N皇后（困难）" class="headerlink" title="N皇后（困难）"></a>N皇后（困难）</h3><p>题目描述：n皇后问题研究的是如何将n个皇后放置在n×n的棋盘上，并且使皇后彼此之间不能相互攻击。给你一个整数n，返回所有不同的n皇后问题的解决方案。每一种解法包含一个不同的n皇后问题的棋子放置方案，该方案中 ‘Q’ 和 ‘.’ 分别代表了皇后和空位。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">// N皇后的限制条件：不同行、不同列、不同对角线</span><br><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; result;</span><br><span class="line">    void backtrack(int n, int row, vector&lt;string&gt;&amp; chessboard) // n表示输入棋盘的大小，row表示当前遍历至第row行</span><br><span class="line">    &#123;</span><br><span class="line">        if(row == n)</span><br><span class="line">        &#123;</span><br><span class="line">            result.push_back(chessboard);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        for(int col = 0; col &lt; n; col++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(isValid(row, col, chessboard, n))  // 判断当前位置放置皇后是否合法</span><br><span class="line">            &#123;</span><br><span class="line">                chessboard[row][col] = &#x27;Q&#x27;;       // 放置皇后</span><br><span class="line">                backtrack(n, row + 1, chessboard);// 递归</span><br><span class="line">                chessboard[row][col] = &#x27;.&#x27;;       // 回溯</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    bool isValid(int row, int col, vector&lt;string&gt;&amp; chessboard, int n)</span><br><span class="line">    &#123;</span><br><span class="line">        // 判断列是否符合要求</span><br><span class="line">        for(int i = 0; i &lt; row; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(chessboard[i][col] == &#x27;Q&#x27;)</span><br><span class="line">            &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 判断45度对角线是否符合要求</span><br><span class="line">        for(int i = row - 1, j = col - 1; i &gt;= 0 &amp;&amp; j &gt;= 0; i--, j--)</span><br><span class="line">        &#123;</span><br><span class="line">            if(chessboard[i][j] == &#x27;Q&#x27;)</span><br><span class="line">            &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 判断135度对角线是否符合要求</span><br><span class="line">        for(int i = row - 1, j = col + 1; i &gt;= 0 &amp;&amp; j &lt; n; i--, j++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(chessboard[i][j] == &#x27;Q&#x27;)</span><br><span class="line">            &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; solveNQueens(int n)</span><br><span class="line">    &#123;</span><br><span class="line">        result.clear();</span><br><span class="line">        vector&lt;string&gt; chessboard(n, string(n, &#x27;.&#x27;));</span><br><span class="line">        backtrack(n, 0, chessboard);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="解数独（困难）"><a href="#解数独（困难）" class="headerlink" title="解数独（困难）"></a>解数独（困难）</h3><p>题目描述：编写一个题目，通过填充空格来解决数独问题。数独的解法需要遵循如下规则：1、数字1<del>9在每一行只能出现一次；2、数字1</del>9在每一列只能出现一次；3、数字1~9在每一个以粗实线分割的3×3的宫格内只能出现一次。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">// 回溯法（设计到行和列）</span><br><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    bool backtrack(vector&lt;vector&lt;char&gt;&gt;&amp; board) // 找到符合条件的解就返回</span><br><span class="line">    &#123;</span><br><span class="line">        for(int i = 0; i &lt; board.size(); i++)  // 遍历行</span><br><span class="line">        &#123;</span><br><span class="line">            for(int j = 0; j &lt; board.size(); j++)  // 遍历列</span><br><span class="line">            &#123;</span><br><span class="line">                if(board[i][j] != &#x27;.&#x27;) continue;</span><br><span class="line">                for(char k = &#x27;1&#x27;; k &lt;= &#x27;9&#x27;; k++)  // 为[i,j]找到合适的k值</span><br><span class="line">                &#123;</span><br><span class="line">                    if(isValid(i, j, k, board))  // 判断在[i,j]位置放入k值是否合适</span><br><span class="line">                    &#123;</span><br><span class="line">                        board[i][j] = k;     // 放置k</span><br><span class="line">                        if(backtrack(board)) return true; // 递归过程，找到合适的，立即返回</span><br><span class="line">                        board[i][j] = &#x27;.&#x27;;   // 回溯</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                return false;   //数独无解</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;  // 整个过程未返回false，则返回true</span><br><span class="line">    &#125;</span><br><span class="line">    bool isValid(int row, int col, char k, vector&lt;vector&lt;char&gt;&gt;&amp; board)</span><br><span class="line">    &#123;</span><br><span class="line">        for(int i = 0; i &lt; 9; i++)  // 判断行</span><br><span class="line">        &#123;</span><br><span class="line">            if(board[row][i] == k)</span><br><span class="line">            &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i = 0; i &lt; 9; i++)  // 判断列</span><br><span class="line">        &#123;</span><br><span class="line">            if(board[i][col] == k)</span><br><span class="line">            &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 判断3×3的宫格</span><br><span class="line">        int startrow = (row / 3) * 3;</span><br><span class="line">        int startcol = (col / 3) * 3;</span><br><span class="line">        for(int i = startrow; i &lt; startrow + 3; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            for(int j = startcol; j &lt; startcol + 3; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                if(board[i][j] == k)</span><br><span class="line">                &#123;</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    void solveSudoku(vector&lt;vector&lt;char&gt;&gt;&amp; board)</span><br><span class="line">    &#123;</span><br><span class="line">        backtrack(board);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Primer C++ 练习题</title>
      <link href="/2022/03/30/PrimerC++/"/>
      <url>/2022/03/30/PrimerC++/</url>
      
        <content type="html"><![CDATA[<p>   本章是关于Primer C++的练习题答案。</p><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="编写程序，在标准输出上打印Hello-World。"><a href="#编写程序，在标准输出上打印Hello-World。" class="headerlink" title="编写程序，在标准输出上打印Hello, World。"></a>编写程序，在标准输出上打印Hello, World。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; &quot;Hello, World!&quot; &lt;&lt; std::endl;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="我们的程序使用加法运算符-来讲两个数相加。编写程序使用乘法运算符-，来打印两个数的积。"><a href="#我们的程序使用加法运算符-来讲两个数相加。编写程序使用乘法运算符-，来打印两个数的积。" class="headerlink" title="我们的程序使用加法运算符+来讲两个数相加。编写程序使用乘法运算符*，来打印两个数的积。"></a>我们的程序使用加法运算符+来讲两个数相加。编写程序使用乘法运算符*，来打印两个数的积。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    std::cout &lt;&lt; &quot;Please input two numbers:&quot; &lt;&lt; std::endl;</span><br><span class="line">    int n1 = 0, n2 = 0;</span><br><span class="line">    std::cin &gt;&gt; n1 &gt;&gt; n2;</span><br><span class="line">    std::cout &lt;&lt; &quot;The product of &quot; &lt;&lt; n1 &lt;&lt; &quot; and &quot; &lt;&lt; n2 &lt;&lt; &quot; is &quot; &lt;&lt; n1 * n2 &lt;&lt; std::endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="我们将所有输出操作放在一条很长的语句中。重写程序，将每个运算对象的打印操作放在一条独立的语句中。"><a href="#我们将所有输出操作放在一条很长的语句中。重写程序，将每个运算对象的打印操作放在一条独立的语句中。" class="headerlink" title="我们将所有输出操作放在一条很长的语句中。重写程序，将每个运算对象的打印操作放在一条独立的语句中。"></a>我们将所有输出操作放在一条很长的语句中。重写程序，将每个运算对象的打印操作放在一条独立的语句中。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    std::cout &lt;&lt; &quot;Please input two numbers:&quot; &lt;&lt; std::endl;</span><br><span class="line">    int n1 = 0, n2 = 0;</span><br><span class="line">    std::cin &gt;&gt; n1 &gt;&gt; n2;</span><br><span class="line">    std::cout &lt;&lt; &quot;The product of &quot;;</span><br><span class="line">    std::cout &lt;&lt; n1;</span><br><span class="line">    std::cout &lt;&lt; &quot;*&quot;;</span><br><span class="line">    std::cout &lt;&lt; n2;</span><br><span class="line">    std::cout &lt;&lt; &quot; is &quot;;</span><br><span class="line">    std::cout &lt;&lt; n1 * n2;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解释下面的程序片段是否合法？"><a href="#解释下面的程序片段是否合法？" class="headerlink" title="解释下面的程序片段是否合法？"></a>解释下面的程序片段是否合法？</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">std::cout &lt;&lt; &quot;The sum of &quot; &lt;&lt; v1;  // 不合法，去掉;</span><br><span class="line">          &lt;&lt; &quot; and &quot; &lt;&lt; v2;        // 不合法，去掉;</span><br><span class="line">          &lt;&lt; &quot; is &quot; &lt;&lt; v1 + v2 &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><h3 id="指出下列哪些输出语句是合法的（如果有的话）："><a href="#指出下列哪些输出语句是合法的（如果有的话）：" class="headerlink" title="指出下列哪些输出语句是合法的（如果有的话）："></a>指出下列哪些输出语句是合法的（如果有的话）：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">std::cout &lt;&lt; &quot;/*&quot;;      // 合法 /*</span><br><span class="line">std::cout &lt;&lt; &quot;*/&quot;;      // 合法 */</span><br><span class="line">std::cout &lt;&lt; /*&quot;*/&quot; */; // 不合法 std::cout &lt;&lt; /*&quot;*/&quot; */&quot;;  修改之后 */</span><br><span class="line">std::cout &lt;&lt; /* &quot;*/&quot; /* &quot;/*&quot; */; // 合法 /*</span><br></pre></td></tr></table></figure><h3 id="编写程序，使用while循环将50到100的整数相加。"><a href="#编写程序，使用while循环将50到100的整数相加。" class="headerlink" title="编写程序，使用while循环将50到100的整数相加。"></a>编写程序，使用while循环将50到100的整数相加。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">// 输出：3825</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int sum = 0;</span><br><span class="line">    int val = 50;</span><br><span class="line">    while(val &lt;= 100)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += val;</span><br><span class="line">        ++val;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; &quot;The sum is &quot; &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="除了-运算符将运算对象的值增加1之外，还有递减运算符-–-实现将值减1。编写程序，使用递减运算符在循环中按递减顺序打印10到0之间的整数。"><a href="#除了-运算符将运算对象的值增加1之外，还有递减运算符-–-实现将值减1。编写程序，使用递减运算符在循环中按递减顺序打印10到0之间的整数。" class="headerlink" title="除了++运算符将运算对象的值增加1之外，还有递减运算符(–)实现将值减1。编写程序，使用递减运算符在循环中按递减顺序打印10到0之间的整数。"></a>除了++运算符将运算对象的值增加1之外，还有递减运算符(–)实现将值减1。编写程序，使用递减运算符在循环中按递减顺序打印10到0之间的整数。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int val = 10;</span><br><span class="line">    while(val &gt;= 0)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; val &lt;&lt; endl;</span><br><span class="line">        val--;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写程序，提示用户输入两个整数，打印这两个整数所指定范围内的所有整数。"><a href="#编写程序，提示用户输入两个整数，打印这两个整数所指定范围内的所有整数。" class="headerlink" title="编写程序，提示用户输入两个整数，打印这两个整数所指定范围内的所有整数。"></a>编写程序，提示用户输入两个整数，打印这两个整数所指定范围内的所有整数。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; &quot;Please input two int numbers:&quot;;</span><br><span class="line">    int small, big;</span><br><span class="line">    cin &gt;&gt; small &gt;&gt; big;</span><br><span class="line">    if(small &gt; big)</span><br><span class="line">    &#123;</span><br><span class="line">        int temp = small;</span><br><span class="line">        small = big;</span><br><span class="line">        big = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    while(small &lt;= big)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; big &lt;&lt; &quot; &quot;;</span><br><span class="line">        big--;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="下面的for循环完成了什么功能？sum的终值是多少？"><a href="#下面的for循环完成了什么功能？sum的终值是多少？" class="headerlink" title="下面的for循环完成了什么功能？sum的终值是多少？"></a>下面的for循环完成了什么功能？sum的终值是多少？</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int sum = 0;</span><br><span class="line">for(int i = -100; i &lt;= 100; ++i)</span><br><span class="line">    sum += i;</span><br><span class="line">// 输出sum=0，-100到100内所有的数的和</span><br></pre></td></tr></table></figure><h3 id="编写程序，从cin读取一组数据，输出其和。"><a href="#编写程序，从cin读取一组数据，输出其和。" class="headerlink" title="编写程序，从cin读取一组数据，输出其和。"></a>编写程序，从cin读取一组数据，输出其和。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int sum = 0;</span><br><span class="line">    for(int value = 0; cin &gt;&gt; value; )</span><br><span class="line">    &#123;</span><br><span class="line">        sum += value;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><h3 id="读程序，写结果"><a href="#读程序，写结果" class="headerlink" title="读程序，写结果"></a>读程序，写结果</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    unsigned u = 10, u2 = 42;</span><br><span class="line">    cout &lt;&lt; u2 - u &lt;&lt; endl;   // 输出32</span><br><span class="line">    cout &lt;&lt; u - u2 &lt;&lt; endl;   // 输出4294967264</span><br><span class="line">    int i = 10 , i2 = 42;    </span><br><span class="line">    cout &lt;&lt; i2 - i &lt;&lt; endl;   // 输出32</span><br><span class="line">    cout &lt;&lt; i - i2 &lt;&lt; endl;   // 输出-32</span><br><span class="line">    cout &lt;&lt; i - u &lt;&lt; endl;    // 输出0</span><br><span class="line">    cout &lt;&lt; u - i &lt;&lt; endl;    // 输出0</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="请你用转义序列编写一段程序，要求先输出2M，然后转到新一行，修改程序使其先输出2，然后输出制表符，再输出M，最后转到新的一行。"><a href="#请你用转义序列编写一段程序，要求先输出2M，然后转到新一行，修改程序使其先输出2，然后输出制表符，再输出M，最后转到新的一行。" class="headerlink" title="请你用转义序列编写一段程序，要求先输出2M，然后转到新一行，修改程序使其先输出2，然后输出制表符，再输出M，最后转到新的一行。"></a>请你用转义序列编写一段程序，要求先输出2M，然后转到新一行，修改程序使其先输出2，然后输出制表符，再输出M，最后转到新的一行。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; &quot;\062\115\012&quot;;</span><br><span class="line">    cout &lt;&lt; &quot;\062\t\115\012&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写程序分别更改指针的值以及指针所指对象的值。"><a href="#编写程序分别更改指针的值以及指针所指对象的值。" class="headerlink" title="编写程序分别更改指针的值以及指针所指对象的值。"></a>编写程序分别更改指针的值以及指针所指对象的值。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int a = 0, b = 1;</span><br><span class="line">int * p1 = &amp;a, *p2 = p1;</span><br><span class="line"></span><br><span class="line">p1 = &amp;b;   // 更改指针的值</span><br><span class="line">*p2 = b;   // 更改指针所指对象的值</span><br></pre></td></tr></table></figure><h3 id="请叙述下面这段代码的作用。"><a href="#请叙述下面这段代码的作用。" class="headerlink" title="请叙述下面这段代码的作用。"></a>请叙述下面这段代码的作用。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int i= 42；</span><br><span class="line">int *p = &amp;i;   // p指向i</span><br><span class="line">*p = *p * *p;  // i的值改为42×42=1764</span><br></pre></td></tr></table></figure><h3 id="说明下列变量的类型和值。"><a href="#说明下列变量的类型和值。" class="headerlink" title="说明下列变量的类型和值。"></a>说明下列变量的类型和值。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int* ip, i, &amp;r = i;  // ip是一个指向int的指针，i是一个int，r是i的别名</span><br><span class="line">int i, *ip = 0;      // i是一个int,ip是一个空指针</span><br><span class="line">int* ip, ip2;        // ip是一个指向int的指针，ip2是一个int</span><br></pre></td></tr></table></figure><h3 id="根据自己的理解写除Sales-data类。"><a href="#根据自己的理解写除Sales-data类。" class="headerlink" title="根据自己的理解写除Sales_data类。"></a>根据自己的理解写除Sales_data类。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">struct Sales_data&#123;</span><br><span class="line">    std::string bookNo;</span><br><span class="line">    std::string bookName;</span><br><span class="line">    unsigned units_sold = 0;</span><br><span class="line">    double revenue = 0.0;</span><br><span class="line">    double price = 0.0;</span><br><span class="line">    // ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习2-41"><a href="#练习2-41" class="headerlink" title="练习2.41"></a>练习2.41</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">struct Sales_data&#123;</span><br><span class="line">    string bookNo;</span><br><span class="line">    unsigned units_sold = 0;</span><br><span class="line">    double revenue = 0.0;</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    Sales_data book;</span><br><span class="line">    double price;</span><br><span class="line">    cin &gt;&gt; book.bookNo &gt;&gt; book.units_sold &gt;&gt; price;</span><br><span class="line">    book.revenue = book.units_sold * price;</span><br><span class="line">    cout &lt;&lt; book.bookNo &lt;&lt; &quot; &quot; &lt;&lt; book.units_sold &lt;&lt; &quot; &quot; &lt;&lt; book.revenue &lt;&lt; &quot; &quot; &lt;&lt; price;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++——面试题</title>
      <link href="/2022/03/26/C++%E9%9D%A2%E8%AF%95%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/03/26/C++%E9%9D%A2%E8%AF%95%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>本章是关于c++面试题的相关笔记整理。</p><h3 id="变量的声明和定义有什么区别？"><a href="#变量的声明和定义有什么区别？" class="headerlink" title="变量的声明和定义有什么区别？"></a>变量的声明和定义有什么区别？</h3><p>   （1）变量的定义为变量分配地址和存储空间，变量的声明不分配地址，用于向程序表明变量的类型和名字。<br>   （2）程序中，变量有且仅有一个定义，但是可以在多个地方声明。<br>   （3）定义也是声明，当定义变量时，也声明了它的类型和名字。<br>   （4）extern关键字，修饰的是变量的声明，说明此变量将在文件以外或在文件后面部分定义。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">extern int va;  // 这是声明，并不是定义，声明va是一个已经定义的外部变量</span><br><span class="line">                // 声明外部变量时可以把变量类型去掉：extern va</span><br><span class="line">&#125;</span><br><span class="line">int va;    // 声明，也是定义，定义va是整型的外部变量</span><br></pre></td></tr></table></figure><p>头文件中的定义与声明：头文件中不可以放变量的定义。一般情况下头文件只放变量的声明，因为头文件要被其他文件包含（即#include），如果把定义放到头文件的话，就不能避免多次定义变量，C++不允许多次定义变量，一个程序中指定变量的定义只有一次，声明可以无数次。<br>三种例外情况：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const int num(10);     // 值在编译时就已知的const变量的定义可以放在头文件中</span><br><span class="line">// 类的定义可以放在头文件中</span><br><span class="line">// inline函数</span><br></pre></td></tr></table></figure><h3 id="简述-ifdef、-else、-endif和-idndef的作用？"><a href="#简述-ifdef、-else、-endif和-idndef的作用？" class="headerlink" title="简述#ifdef、#else、#endif和#idndef的作用？"></a>简述#ifdef、#else、#endif和#idndef的作用？</h3><p>条件编译：部分内容只在满足一定条件才进行编译，也就是对一部分内容指定编译的条件。<br>条件编译命令最常见的形式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 方式一</span><br><span class="line">#ifdef 标识符    // 当标识符被定义过（一般用#define命令定义），对程序块1进行编译</span><br><span class="line">    程序块1</span><br><span class="line">#else            // 否则编译程序块2</span><br><span class="line">    程序块2</span><br><span class="line">#endif</span><br><span class="line">// 方式二</span><br><span class="line">#ifndef 标识符     // 与方式一相反</span><br><span class="line">    程序块1</span><br><span class="line">#else</span><br><span class="line">    程序块2</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p>其中#else部分也可以没有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#ifdef 标识符</span><br><span class="line">    程序块</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p>可以通过#ifedf和#ifndef命令测试某个宏是否已被定义，避免重复定义。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#ifndef DEBUG    // 如果没有定义DEBUG,再执行下面的定义语句</span><br><span class="line">#define DEBUG</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><h3 id="写出int、bool、float、指针变量与’零值’比较的if语句？"><a href="#写出int、bool、float、指针变量与’零值’比较的if语句？" class="headerlink" title="写出int、bool、float、指针变量与’零值’比较的if语句？"></a>写出int、bool、float、指针变量与’零值’比较的if语句？</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// int与零值比较</span><br><span class="line">if(n == 0)</span><br><span class="line">if(n != 0)</span><br><span class="line"></span><br><span class="line">// bool与零值比较</span><br><span class="line">bool flag;</span><br><span class="line">if(flag)    // 表示flag为真</span><br><span class="line">if(!flag)   // 表示flag为假</span><br><span class="line"></span><br><span class="line">// float与零值比较</span><br><span class="line">const float EPSINON = 0.00001;</span><br><span class="line">if((x &gt;= -EPSINON) &amp;&amp; (x &lt; EPSINON)) // 其中EPSINON是允许的误差（即精度）</span><br><span class="line"></span><br><span class="line">// 指针变量与零值比较</span><br><span class="line">if(p == nullprt)</span><br><span class="line">if(p != nullptr)</span><br></pre></td></tr></table></figure><h3 id="结构体可以直接赋值吗？"><a href="#结构体可以直接赋值吗？" class="headerlink" title="结构体可以直接赋值吗？"></a>结构体可以直接赋值吗？</h3><p>结构体是常用的自定义构造类型，是一种常见的数据打包方法。结构体对象的初始化有多种方式，分为指定初始化、顺序初始化、构造函数初始化。设有结构体：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct Mystruct</span><br><span class="line">&#123;</span><br><span class="line">string name;</span><br><span class="line">int ages;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(1)指定初始化：采用点号加赋值符号实现或采用冒号实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mystruct mystruct = &#123;.name = &quot;hhhh&quot;, .b = 2&#125;;  // 点号+赋值符号</span><br><span class="line">Mystruct mystruct = &#123;a : &quot;hhhh&quot;, b : 2&#125;;    // 冒号</span><br></pre></td></tr></table></figure><p>(2)顺序初始化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mystruct mystruct = &#123;&quot;hhhh&quot;, 2&#125;;</span><br></pre></td></tr></table></figure><p>(3)构造函数初始化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 带构造函数的结构体</span><br><span class="line">strcut Mystruct</span><br><span class="line">&#123;</span><br><span class="line">Mystruct(string name, int ages)&#123;this -&gt; name = name; this -&gt; ages = ages;&#125;;</span><br><span class="line">string name;</span><br><span class="line">int ages;</span><br><span class="line">&#125;</span><br><span class="line">// 初始化</span><br><span class="line">Mystruct mystruct(&quot;hhhh&quot;, 2);</span><br></pre></td></tr></table></figure><p>结构体赋值：<br>变量的赋值和初始化是不一样的，初始化是在变量定义的时候完成的，属于变量定义的一部分，赋值是在变量完成后想改变变量值所采取的操作。结构体变量的赋值是不能采用大括号的方式进行赋值的。依次给每一个结构体成员变量进行赋值。使用已有的结构体变量或另一个结构体变量赋值，即结构体变量之间是可以相互赋值的。</p><h3 id="sizeof和strlen的区别？"><a href="#sizeof和strlen的区别？" class="headerlink" title="sizeof和strlen的区别？"></a>sizeof和strlen的区别？</h3><p>（1）sizeof不是函数，是运算符。strlen是标准库中提供的计算字符串长度的函数；<br>（2）sizeof的参数可以是数据的类型，也可以是变量，而strlen只能是以结尾为’\0’的字符串作为参数；<br>（3）sizeof计算数据所占用的内存大小，以字节为单位，char为一个字节，int通常为4个字节，strlen返回字符串的长度不包括末尾的’\0’；<br>（4）编译器在编译时就计算出了sizeof的结果，而strlen函数必须在运行时才能计算出来；<br>（5）数组做sizeof的参数不退化（数组名不会退化为指针），传递给strlen就退化为指针了。</p><h3 id="C语言的关键字static和c-的关键字static有什么区别？"><a href="#C语言的关键字static和c-的关键字static有什么区别？" class="headerlink" title="C语言的关键字static和c++的关键字static有什么区别？"></a>C语言的关键字static和c++的关键字static有什么区别？</h3><p>在C中，static用来修饰局部静态变量和外部静态变量、函数。<br>在C++中，除了上述功能外，还用来定义类的成员变量和函数，即静态成员和静态成员函数。<br>(1)在C&#x2F;C++中，局部变量按照存储形式可以分为auto、static和register。static类型局部变量存储在静态存储区，在程序整个运行期间都不释放。static局部变量在所处模块中初次运行时进行初始化工作，且只操作一次。对于局部静态变量，如果不赋初值，编译期间会自动赋初值0或空字符，而auto类型的初值时不确定的。<br>(2)为了限制全局变量&#x2F;函数的作用域，函数或变量前加static使得函数成为静态函数。此处的static不是指存储方式，而是指函数的作用域仅限于本文件，又称为内部函数。<br>(3)C++特有：表示属于一个类而不是属于此类的任何特定对象的变量和函数。在这里，static既不是限定作用域的，也不是扩展生存期的，而是指变量&#x2F;函数在此类中的唯一性。对于静态数据成员而言，成员函数不管是不是static，在内存中只有一个副本，普通成员函数调用时，需要传入this指针，static成员函数调用时，没有this指针。</p><h3 id="C语言的malloc和C-中的new有什么区别？"><a href="#C语言的malloc和C-中的new有什么区别？" class="headerlink" title="C语言的malloc和C++中的new有什么区别？"></a>C语言的malloc和C++中的new有什么区别？</h3><p>(1)new和delete是C++关键字，需要编译器支持；malloc和free是库函数，需要头文件支持。<br>(2)使用new操作符申请内存分配时无须指定内存块的大小，编译器会根据类型信息自行计算；malloc则需要显式地指出所需内存的大小。<br>(3)new操作符内存分配成功时，返回的是对象类型的指针，类型严格与对象匹配，无须进行类型转换；malloc内存分配成功则是返回void<em>，需要通过强制类型转换将void</em>指针转换成需要的类型。<br>(4)new可以调用对象的构造函数，对应的delete调用相应的析构函数；malloc只能动态地申请和释放内存，并不执行构造和析构函数。<br>(5)new内存分配失败时，会抛出bac_alloc异常；malloc分配内存失败时返回NULL。</p><h3 id="写一个标准宏MIN"><a href="#写一个标准宏MIN" class="headerlink" title="写一个标准宏MIN"></a>写一个标准宏MIN</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define min(a, b) ((a) &lt;= (b) ? (a) : (b))</span><br></pre></td></tr></table></figure><h3 id="i和i-的区别？"><a href="#i和i-的区别？" class="headerlink" title="++i和i++的区别？"></a>++i和i++的区别？</h3><p>(1)++i返回+1后的值，i++返回原来的值后再+1。<br>(2)i++不能作为左值（对应内存中有确定存储地址的对象的表达式的值），而++i可以。</p><h3 id="volatile有什么作用？"><a href="#volatile有什么作用？" class="headerlink" title="volatile有什么作用？"></a>volatile有什么作用？</h3><p>(1) 一个中断服务子程序会访问到的非自动变量。<br>(2) 多线程任务下各任务间共享的标志应该加volatile。<br>(3) 存储器映射的硬件寄存器通常要加volatile，因为对它的每次读写都可能有不同的意义。<br>虽然volatile在嵌入方面应用比较多，但是在PC软件的多线程中，volatile修饰的临界变量也是非常实用的。</p><h3 id="一个参数可以既是const又是volatile吗？"><a href="#一个参数可以既是const又是volatile吗？" class="headerlink" title="一个参数可以既是const又是volatile吗？"></a>一个参数可以既是const又是volatile吗？</h3><p>可以。用const和volatile修饰变量，表明这个变量在程序内部是只读的，不能改变的，只在程序外部条件变化下改变，并且同编译器不会优化这个变量，每次使用这个变量时，都要小心地去内存读取这个变量的值，而不是去寄存器读取它的备份。<br>const知只是不允许程序中的代码改变某一变量，其在编译器发挥作用，它并没有实际地禁止某段内存的读写特性。</p><h3 id="a和-amp-a有什么区别？"><a href="#a和-amp-a有什么区别？" class="headerlink" title="*a和&amp;a有什么区别？"></a>*a和&amp;a有什么区别？</h3><p>&amp;a是指变量a的地址；*a用在不同的地方，含义也不一样。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 在声明语句中，*a说明a是一个指针变量</span><br><span class="line">int *a;</span><br><span class="line">// 在其它语句中，*a前面没有操作数，且a是一个指针时，*a代表指针a指向的地址内存放的数据</span><br><span class="line">b = *a;</span><br><span class="line">// *a前面有操作数，且a是一个普通变量,*代表乘号</span><br><span class="line">c = b * a; </span><br></pre></td></tr></table></figure><h3 id="用C编写一个死循环程序"><a href="#用C编写一个死循环程序" class="headerlink" title="用C编写一个死循环程序"></a>用C编写一个死循环程序</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">while(1) &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="结构体内存对齐问题"><a href="#结构体内存对齐问题" class="headerlink" title="结构体内存对齐问题"></a>结构体内存对齐问题</h3><p>请写出以下代码的输出结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">struct S1</span><br><span class="line">&#123;</span><br><span class="line">int i : 8;  // int占8个字节(64位)，i 占8个bit,</span><br><span class="line">char j : 4; // j 占4个bit</span><br><span class="line">int a : 4;  // a 占4个bit  8 + 4 + 4 &lt; 64</span><br><span class="line">double b;  // 没有指定位域，占8个字节  </span><br><span class="line">&#125;;</span><br><span class="line">struct S2</span><br><span class="line">&#123;</span><br><span class="line">int i : 8;  // int 占8个字节(64位)，i 占8个bit</span><br><span class="line">char j : 4; // j 占4个bit </span><br><span class="line">double b;   // double占8个字节</span><br><span class="line">int a : 4;  // int 占8个字节</span><br><span class="line">&#125;;</span><br><span class="line">struct S3</span><br><span class="line">&#123;</span><br><span class="line">int i;     // int 占8个字节 </span><br><span class="line">char j;    // char 占1个字节</span><br><span class="line">double b;  // double 占8个字节</span><br><span class="line">int a;     // int 占8个字节</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%d\n&quot;, sizeof(struct S1));  //  8 + 8 = 16 个字节 输出16 </span><br><span class="line">printf(&quot;%d\n&quot;, sizeof(struct S2));  //  8 * 3 = 24 个字节 输出24</span><br><span class="line">printf(&quot;%d\n&quot;, sizeof(struct S3));  //  8 * 4 = 32 个字节 输出32</span><br><span class="line">return 0；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构体内存对齐规则：第一个成员在与结构体变量偏移量为0的地址处；其它当初成员变量对齐到某个数字（对齐数）的整数倍的地址处，对齐数：编译器默认的一个对齐数与该成员大小的较小值；结构体总大小为最大对齐数（每一个成员变量都有一个对齐数）的整数倍；如果嵌套了结构体的话，嵌套的结构体对齐到自己的最大对齐数的整数倍处，结构体的整体大小就是所有最大对齐数（含嵌套结构体的对齐数）的整数倍。</p><h3 id="全局变量和局部变量有什么区别？要怎么实现？操作系统和编译器是怎么知道的？"><a href="#全局变量和局部变量有什么区别？要怎么实现？操作系统和编译器是怎么知道的？" class="headerlink" title="全局变量和局部变量有什么区别？要怎么实现？操作系统和编译器是怎么知道的？"></a>全局变量和局部变量有什么区别？要怎么实现？操作系统和编译器是怎么知道的？</h3><p>全局变量是整个程序都可访问的变量，谁都可以访问，内存中分配在全局数据区，生存期在整个程序中从运行到结束（在程序结束时所占的内存释放）。<br>局部变量存在于模块（子程序、函数）中，只有所在模块可以访问，其它模块不可以直接访问，分配在栈区，模块结束（函数调用结束），局部变量消失，所占的内存释放。<br>操作系统和编译器通过内存分配的位置来区分全局变量和局部变量。全局变量分配在全局数据段并且在程序开始运行的时候被加载，局部变量则分配在堆栈里面。</p><h3 id="简述C、C-程序编译的内存分配情况？"><a href="#简述C、C-程序编译的内存分配情况？" class="headerlink" title="简述C、C++程序编译的内存分配情况？"></a>简述C、C++程序编译的内存分配情况？</h3><p>C、C++中内存分配可以分为以下三种方式：<br>1、从静态存储区分配：内存在程序编译时就分配好，这部分内存在程序的整个运行期间都存在。速度快，不容易出错，因为系统会善后，如全局变量、static变量等。<br>2、在栈上分配：在执行函数时，函数内局部变量的存储单元都在栈上创建，函数执行结束时这些存储单元被自动释放。栈内存分配内置于处理器的指令集中，效率很高，但是分配内存容量有限，大小为2M。<br>3、从堆上分配：即动态内存分配。程序在运行的时候用malloc或new申请任意大小的内存，程序员自己负责何时用free或delete释放内存。动态内存的生存期由程序员决定，使用非常灵活。如果在堆上分配了空间，就有责任回收它，否则运行的程序会出现内存泄漏，另外频繁地分配和释放不同大小的堆空间将会产生堆内碎块。<br>一个C、C++程序编译时内存分为五大存储区：堆区、栈区、全局区、文字常量区、程序代码区。</p><h3 id="简述strcpy、sprintf于memcpy的区别？"><a href="#简述strcpy、sprintf于memcpy的区别？" class="headerlink" title="简述strcpy、sprintf于memcpy的区别？"></a>简述strcpy、sprintf于memcpy的区别？</h3><p>1、操作对象不同：strcpy的两个操作对象均为字符串；sprintf的操作源对象可以是多种数据类型，目的操作对象是字符串；memcpy的两个操作对象就是两个任意可以操作的内存地址，并不限于何种数据类型。<br>2、执行效率不同：memcpy最高，strcpy次之，sprintf的效率最低。<br>3、实现功能不同：strcpy主要实现字符串变量之间的拷贝；sprintf主要实现其它数据类型格式到字符串的转换；memcpy主要是内存块之间的拷贝。<br>注意：strcpy、sprintf、memcpy都可以实现拷贝的功能，但是针对的对象不同，根据实际需求，来选择合适的函数实现拷贝功能。</p><h3 id="请解析-void-0-；"><a href="#请解析-void-0-；" class="headerlink" title="请解析(*(void(*)())0)()；?"></a>请解析(*(void(*)())0)()；?</h3><p>void(*)() 这是一个函数指针类型，该函数没有参数，没有返回值；<br>(void(*)())0 这是将0强制转换称换数指针类型，0是一个地址，即一个函数存在首地址为0的一块区域内<br>(*(void(*)())0) 这是取0地址开始的一段内存里面的内容，其内容就是保存在首地址为0的一段区域内的函数<br>(*(void(*)())0)(); 函数调用语句</p><h3 id="C-中的指针和引用有什么区别？"><a href="#C-中的指针和引用有什么区别？" class="headerlink" title="C++中的指针和引用有什么区别？"></a>C++中的指针和引用有什么区别？</h3><p>1、定义和性质不同：指针是一个变量，存储的是一个地址，一个指向内存单元的地址；引用是原变量的别名，和原变量实质上是一样的；<br>2、指针可以多级，引用只能一级；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int **p;  // 合法</span><br><span class="line">int &amp;&amp;a;  // 不合法</span><br></pre></td></tr></table></figure><p>3、指针可以在定义的时候不初始化，引用必须在定义的时候初始化；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int *p;   // 合法</span><br><span class="line">int &amp;a;   // 不合法</span><br><span class="line">int a = 1;</span><br><span class="line">int &amp;b = a; // 合法</span><br></pre></td></tr></table></figure><p>4、指针初始化之后可以改变，引用不可以；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int a = 1;</span><br><span class="line">int *p = &amp;a;  // 初始化，p指向a的地址</span><br><span class="line">int &amp;b = a;   // 初始化，b是a的引用</span><br><span class="line">int c = 2;</span><br><span class="line">p = &amp;c;       // 合法，p指向c的地址</span><br><span class="line">b = c;        // 不合法，b不可以改变</span><br></pre></td></tr></table></figure><p>5、指针可以指向NULL，引用不可以为NULL；<br>6、sizeof的运算结果不同；<br>7、自增运算意义不同；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int a = 1;</span><br><span class="line">int *p = &amp;a;</span><br><span class="line">int &amp;b = a;</span><br><span class="line">p++;  // p指向a后面的地址</span><br><span class="line">b++;  // a++</span><br></pre></td></tr></table></figure><p>8、做为参数传递时，指针需要被解引用才可以对对象进行操作，而直接对引用的修改会改变引用所指向的对象；<br>9、可以有const指针，但是没有const引用；<br>10、如果返回动态分配内存的对象或内存，必须使用指针，引用可能会引起内存泄露。</p><h3 id="typedef和define有什么区别？"><a href="#typedef和define有什么区别？" class="headerlink" title="typedef和define有什么区别？"></a>typedef和define有什么区别？</h3><p>1、用法不同：typedef用来定义一种数据类型的别名，增强程序的可读性；define主要用来定义常量，以及书写复杂使用频繁的宏。<br>2、执行时间不同：typedef是编译过程的一部分，有类型检查功能；define是宏定义，是预处理的一部分，其发生在编译之前，只是简单的进行字符串的替换，不进行类型检查。<br>3、作用域不同：typedef有作用域限制，define不受作用域的约束，只要是在define声明后的引用都是正确的。<br>4、对指针操作不同：typedef和define定义的指针有区别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#define INTPTR1 int*</span><br><span class="line">typedef int* INTPTR2;</span><br><span class="line">INTPTR1 p1, p2; // 定义一个指针变量p1和一个整型变量p2</span><br><span class="line">INTPTR2 p3, p4; // 声明两个指针p3，p4</span><br><span class="line">int a = 1;</span><br><span class="line">int b = 2;</span><br><span class="line">int c = 3;</span><br><span class="line">const INTPTR1 p5 = &amp;a;   // p5是常量指针，不可以修改p5所指向的内容，但是p5可以指向其它内容</span><br><span class="line">const INTPTR2 P6 = &amp;b;   // p6是指针常量，不可以使p6指向其它内容</span><br><span class="line">INTPTR2 const p7 = &amp;c;   // p7是指针常量</span><br></pre></td></tr></table></figure><h3 id="指针常量和常量指针的区别？"><a href="#指针常量和常量指针的区别？" class="headerlink" title="指针常量和常量指针的区别？"></a>指针常量和常量指针的区别？</h3><p>指针常量，是一个常量，但是是指针修饰的，指针里面所存储的内容（内存地址）是常量，不能改变。但是，对应内存地址里存的内容是可以通过指针改变的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int* const p;  // 指针常量</span><br></pre></td></tr></table></figure><p>常量指针：常指针，是一个指针，指向一个只读的对象，指针中所存的地址对应的值是常量，不能通过指针来修改它的值。但是，指针自身不是常量，它自身的值可以改变，从而指向另一个地址。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 是一个指针</span><br><span class="line">int const* p; // 常量指针</span><br><span class="line">const int* p; // 常量指针</span><br></pre></td></tr></table></figure><p>无论是指针常量还是常量指针，其最大的用途就是作为函数的形式参数，保证实参在被调用函数中的不可改变性。</p><h3 id="简述队列和栈的异同？"><a href="#简述队列和栈的异同？" class="headerlink" title="简述队列和栈的异同？"></a>简述队列和栈的异同？</h3><p>相同点：队列和栈都是线性存储结构；都可以通过顺序结构和链式结构实现；插入和删除的时间复杂度都是O(1)，在空间复杂度上两者也一样；多链栈和多链队列的管理模式可以相同。<br>不同点：删除和插入操作的位置不同，栈的插入和删除都在线性表的同一端点（栈顶），队列在线性表的表头（队头）插入，表尾（队尾）删除；栈是先进后出，队列是先进先出。<br>注意：区别栈区和堆区，堆区的存取是”顺序随意”，而栈区是“后进先出”。栈由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。堆一般由程序员分配释放，若程序员不释放，程序结束时可能由OS回收，分配方式类似于链表。它与本题中的堆和栈是两回事。堆和栈只是一种数据结构，而堆区和栈区是程序的不同内存存储区域。</p><h3 id="设置地址为0x67a9的整型变量的值为0xaa66？"><a href="#设置地址为0x67a9的整型变量的值为0xaa66？" class="headerlink" title="设置地址为0x67a9的整型变量的值为0xaa66？"></a>设置地址为0x67a9的整型变量的值为0xaa66？</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int *ptr;</span><br><span class="line">ptr = (int *)0x67a9；  // 强制类型转换，将整型数据转换称指针类型</span><br><span class="line">*ptr = 0xaa66;</span><br></pre></td></tr></table></figure><h3 id="编码实现字符串转换为数字？"><a href="#编码实现字符串转换为数字？" class="headerlink" title="编码实现字符串转换为数字？"></a>编码实现字符串转换为数字？</h3><p>编码实现函数atoi()，设计一个程序，把一个字符串转换为一个整型数值，例如字符串“5486321”，转换成数字:5486321。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">int atoi(const char* str)</span><br><span class="line">&#123;</span><br><span class="line">int num = 0; // 保存转换后的数值</span><br><span class="line">int isnegative = 0;  // 记录字符串中是否有负号</span><br><span class="line">int n = 0;   // 记录字符串的长度</span><br><span class="line">char *p = str;</span><br><span class="line">if(p == nullptr)  // 判断指针的合法性</span><br><span class="line">&#123;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">while(*p++ != &#x27;\0&#x27;)  // 计算字符串的长度</span><br><span class="line">&#123;</span><br><span class="line">n++;</span><br><span class="line">&#125;</span><br><span class="line">p = str;</span><br><span class="line">    if(p[0] == &#x27;-&#x27;)   // 判断数组是否有负号</span><br><span class="line">    &#123;</span><br><span class="line">    isnegative = 1;</span><br><span class="line">    &#125;</span><br><span class="line">    char temp = &#x27;0&#x27;;</span><br><span class="line">    for(int i = 0; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">    char temp = *p++；</span><br><span class="line">    if(temp &gt; &#x27;9&#x27; || temp &lt; &#x27;0&#x27;) continue;  // 滤除非数字字符</span><br><span class="line">        if（num != 0 || temp !=&#x27;0&#x27;)             // 滤除字符串开始的0字符</span><br><span class="line">        &#123;</span><br><span class="line">        temp -= 0x30;  // 将数字字符转换为数值</span><br><span class="line">        num += *int(pow(10, n - 1 - i)); // 10的(n-1-i)次方</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(isnegative)   // 如果字符串中有符号，将数值取反</span><br><span class="line">    &#123;</span><br><span class="line">    return (0 - num);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">    return num;   // f返回转换后的数值</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C语言的结构体和C-有什么区别？"><a href="#C语言的结构体和C-有什么区别？" class="headerlink" title="C语言的结构体和C++有什么区别？"></a>C语言的结构体和C++有什么区别？</h3><p>1、C的结构体不允许有函数存在，C++允许有内部成员函数，且允许该函数是虚函数。所以C的结构体是没有给构造函数、析构函数和this指针的。<br>2、C语言的结构体的数据成员是没有private、public和protected访问限定的。而C++的类成员有这些访问限定。<br>3、C语言的结构体是没有继承关系的，而C++的类却有丰富的继承关系。<br>4、在C语言中定义一个结构体类型要用typedef，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">typedef struct Complex&#123;</span><br><span class="line">int a;</span><br><span class="line">int b;</span><br><span class="line">&#125;Complex;</span><br><span class="line">// 声明 Complex是struct Complex的别名</span><br><span class="line">Complex complex;</span><br><span class="line">// 没有typedef的声明</span><br><span class="line">struct Complex complex;</span><br></pre></td></tr></table></figure><p>在C++中用typedef,</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">struct Complex1&#123;</span><br><span class="line">int a;</span><br><span class="line">int b;</span><br><span class="line">&#125;complex;   // complex是一个变量,可以直接访问complex.a</span><br><span class="line">typedef struct Complex2&#123;</span><br><span class="line">    int a;</span><br><span class="line">    int b;</span><br><span class="line">&#125;Complex2;  // Complex2是一个结构体类型,必须先Complex2 complex2，再complex2.a</span><br></pre></td></tr></table></figure><h3 id="如何避免“野指针”？"><a href="#如何避免“野指针”？" class="headerlink" title="如何避免“野指针”？"></a>如何避免“野指针”？</h3><p>野指针： 随机指向内存中一个地址，对于这个地址不一定有访问权，会导致内存泄漏（访问了已经释放的内存，或没有访问权限）。<br>避免方式：<br>(1) 当指针没有做初始化，即没有指向时，将指针指向nullptr，一方面提醒自己这个指向nullptr的指针不可操作不可访问，另一方面nullptr便于检查和避免野指。初始化为nullptr的目的：一是出现错误时易改错，而是(void *0)时0地址，不允许操作，不允许访问；<br>(2) 指针被free或delete之后，没有置为nullptr。解决办法：指针指向的内存空间被释放后应该指向nullptr；<br>(3) 指针操作超越了变量的作用范围。解决办法：在变量的作用域结束前释放掉变量的地址空间并让指针指向nullptr。</p><h3 id="句柄和指针的区别和联系是什么？"><a href="#句柄和指针的区别和联系是什么？" class="headerlink" title="句柄和指针的区别和联系是什么？"></a>句柄和指针的区别和联系是什么？</h3><p>指针指向系统中物理内存的地址，而句柄是windows在内存中维护的一个对象内存物理地址列表的整数索引，句柄是一种指向指针的指针。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>力扣--二叉树</title>
      <link href="/2022/03/25/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2022/03/25/%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>本章是关于二叉树的理论知识以及相关的力扣刷题的笔记。</p><h2 id="树的基本概念"><a href="#树的基本概念" class="headerlink" title="树的基本概念"></a>树的基本概念</h2><h3 id="树的定义"><a href="#树的定义" class="headerlink" title="树的定义"></a>树的定义</h3><p>树（Tree）是n(n≥0)个结点的有限集。n&#x3D;0时称为空树。在任意一棵非空树上：<br>（1）有且仅有一个特定的称为根（Root）的结点；<br>（2）当n≥1时，其余结点可以分为m(m&gt;0)个互不相交的有限集，其中每一个集合本身有时一棵树，并且称为根的子树（subTree)。<br>对树的定义还需要强调两点：<br>（1）n&gt;0时根结点是唯一的，不可能存在多个根结点；<br>（2）m&gt;0时，子树的个数没有限制，但它们一定是互不相交的。</p><h4 id="结点分类"><a href="#结点分类" class="headerlink" title="结点分类"></a>结点分类</h4><p>树的结点包含一个数据元素及若干指向其子树的分支。结点拥有的子树数称为结点的度（Degree)。度为0的结点称为叶结点或终端结点；度不为0的结点称为非终端结点或分支结点，分支结点也称为内部节点。树的度是树内各结点的度的最大值。</p><h4 id="结点间的关系"><a href="#结点间的关系" class="headerlink" title="结点间的关系"></a>结点间的关系</h4><p>结点的子树的根称为该结点的孩子，相应地，该结点称为孩子的双亲。同一个双亲的孩子之间互称兄弟。结点的祖先是从根到该结点所经分支上的所有结点。以某结点为根的子树中的任一结点都称为该结点的子孙。</p><h4 id="树的其它相关概念"><a href="#树的其它相关概念" class="headerlink" title="树的其它相关概念"></a>树的其它相关概念</h4><p>结点的层次从根开始定义起，根为第一层，根的孩子为第二层。其双亲在同一层的结点互为堂兄弟。树中结点的最大层次称为深度或高度。<br>如果将树中结点的各子树看成是从左至右有次序的，不能互换的，则称该树为有序树，否则称为无序树。</p><h4 id="线性表和树的对比"><a href="#线性表和树的对比" class="headerlink" title="线性表和树的对比"></a>线性表和树的对比</h4><p>线性结构：第一个数据元素无前驱；最后一个数据元素无后继；中间元素一个前驱，一个后继。<br>树结构：根节点，无双亲，唯一；叶结点，无孩子，可以多个；中间结点，一个双亲，多个孩子。</p><h3 id="二叉树的定义"><a href="#二叉树的定义" class="headerlink" title="二叉树的定义"></a>二叉树的定义</h3><p>二叉树是n(n≥0)个结点的有限几何 ，该集合或者为空集（称为空二叉树），或者由一个额根节点和两棵互不相交的、分别称为根节点的左子树和右子树的二叉树组成。</p><h4 id="二叉树的特点"><a href="#二叉树的特点" class="headerlink" title="二叉树的特点"></a>二叉树的特点</h4><p>(1)每个结点最多有两棵子树，所以二叉树中不存在度大于2的结点。<br>(2)左子树和右子树是有顺序的，次序不能任意颠倒。<br>(3)即使树中某结点只有一棵子树，也要区分它是左子树还是右子树。<br>二叉树具有五种形态：<br>(1)空二叉树；(2)只有一个根节点；(3)根节点只有左子树；(4)根节点只有右子树；(5)根节点既有左子树又有右子树。</p><h4 id="特殊二叉树"><a href="#特殊二叉树" class="headerlink" title="特殊二叉树"></a>特殊二叉树</h4><p>(1)斜树：所有结点都只有左子树的二叉树称为左斜树。所有结点都只有右子树的二叉树称为右斜树。这两者统称为斜树。<br>(2)满二叉树：在一棵二叉树中，如果所有分支结点都存在左子树和右子树，并且所有叶子都在同一层上，这样的二叉树称为满二叉树。满二叉树的特点：①叶子只能出现在最下一层；②非叶子结点的度一定是2；③在同样深度的二叉树中，满二叉树的结点个数最多，叶子数最多。<br>(3)完全二叉树：对一棵具有n个结点的二叉树按层序编号，如果编号为i(1≤i≤n)的结点与同样深度的满二叉树中编号为i的结点在二叉树中位置完全相同，则这颗二叉树称为完全二叉树。完全二叉树的特点：①叶子结点只能出现在最下两层；②最下层的叶子一定集中在左部连续位置；③倒数二层，如有叶子结点，一定都在右部连续位置；④如果结点度为1，则该结点只有左孩子，即不存在只有右子树的情况；⑤同样节点数的二叉树，完全二叉树的深度最小。</p><h3 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h3><p>(1)在二叉树的第1层上至多有2<sup>i-1</sup>个结点(i ≥ 1)；<br>(2)深度为k的二叉树至多有2<sup>k</sup>-1个结点(k ≥ 1)；<br>(3)对任何一个二叉树T，如果其终端结点数为n<sub>0</sub>，度为2的结点数为n<sub>2</sub>，则n<sub>0</sub>&#x3D;n<sub>2</sub>+1；<br>(4)具有n个结点的完全二叉树的深度为[log<sub>2</sub>n]+1([X]表示不大于X的最大整数)；<br>(5)如果对一棵有n个结点的完全二叉树(其深度为[log<sub>2</sub>n]+1)的结点按层序编号(从第1层到第[log<sub>2</sub>n]+1层，每层从左到右)，对任一结点i(1 ≤ i ≤ n)有：①如果i&#x3D;1,则结点i是二叉树的根，无双亲；如果i&gt;1，则双亲是结点[i&#x2F;2]；②如果2i&gt;n，则结点i无左孩子(结点i为叶子节点)，否则其左孩子就是结点2i；③如果2i+1&gt;n，则结点无右孩子；否则其右孩子就是2i+1。</p><h3 id="二叉树的存储结构"><a href="#二叉树的存储结构" class="headerlink" title="二叉树的存储结构"></a>二叉树的存储结构</h3><h4 id="二叉树的顺序存储结构"><a href="#二叉树的顺序存储结构" class="headerlink" title="二叉树的顺序存储结构"></a>二叉树的顺序存储结构</h4><p>二叉树的顺序存储结构就是用一维数组存储二叉树中的结点，并且结点的存储位置，也就是数组的下标要能体现结点之间的逻辑关系。顺序存储的结构一般只用于完全二叉树。</p><h4 id="二叉链表"><a href="#二叉链表" class="headerlink" title="二叉链表"></a>二叉链表</h4><p>二叉树每个结点最多有两个孩子，所以为它设计一个数据域和两个指针域，将这样的链表称为二叉链表。二叉链表的结点结构定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">typedef struct BiTNode</span><br><span class="line">&#123;</span><br><span class="line">    TElemType data;  // 结点数据</span><br><span class="line">    struct BiTNode *lchild, *rchild;  // 左右孩子指针</span><br><span class="line">&#125; BiTNode, *BiTree;</span><br></pre></td></tr></table></figure><h3 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h3><p>二叉树的遍历是指从根节点出发，按照某种次序依次访问二叉树中的所有结点，使得每个结点都被访问依次且仅被访问一次。</p><h4 id="二叉树的前序遍历"><a href="#二叉树的前序遍历" class="headerlink" title="二叉树的前序遍历"></a>二叉树的前序遍历</h4><p>规则是若二叉树为空，则空操作返回，否则先访问根节点，然后前序遍历左子树，再前序遍历右子树。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 递归的方法</span><br><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    void traversal(TreeNode* curnode, vector&lt;int&gt;&amp; re) // vector用于存放结点的数值</span><br><span class="line">    &#123;</span><br><span class="line">        if(curnode == nullptr) return;      // 当前遍历的结点为空，本轮递归结束</span><br><span class="line">        re.push_back(curnode -&gt; val);       // 先取根节点的值</span><br><span class="line">        traversal(curnode -&gt; left, re);     // 左</span><br><span class="line">        traversal(curnode -&gt; right, re);    // 右</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;int&gt; preorderTraversal(TreeNode* root)</span><br><span class="line">    &#123;</span><br><span class="line">        vector&lt;int&gt; result;</span><br><span class="line">        traversal(root, result);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="二叉树的中序遍历"><a href="#二叉树的中序遍历" class="headerlink" title="二叉树的中序遍历"></a>二叉树的中序遍历</h4><p>规则是若树为空，则空操作返回，否则从根结点开始(注意并不是先访问根结点)，中序遍历根节点的左子树，然后是访问根节点，最后中序遍历右子树。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 递归法</span><br><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    void traversal(TreeNode* curnode, vector&lt;int&gt;&amp; re)</span><br><span class="line">    &#123;</span><br><span class="line">        if(curnode == nullptr) return;</span><br><span class="line">        traversal(curnode -&gt; left, re);   // 左</span><br><span class="line">        re.push(curnode -&gt; val);          // 根</span><br><span class="line">        traversal(curenode -&gt; right, re); // 右</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;int&gt; inorderTraversal(TreeNode* root)</span><br><span class="line">    &#123;</span><br><span class="line">        vector&lt;int&gt; result;</span><br><span class="line">        traversal(root, result);</span><br><span class="line">        return result;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="二叉树后序遍历"><a href="#二叉树后序遍历" class="headerlink" title="二叉树后序遍历"></a>二叉树后序遍历</h4><p>规则是若树为空，则空操作返回，否则从左到右先叶子后结点的方式遍历访问左右子树，最后是访问根结点。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 递归法</span><br><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    void traversal(TreeNode* curnode, vector&lt;int&gt;&amp; re)</span><br><span class="line">    &#123;</span><br><span class="line">        if(curnode == nullptr) return;</span><br><span class="line">        traversal(curnode -&gt; left, re);   // 左</span><br><span class="line">        traversal(curnode -&gt; right, re);  // 右</span><br><span class="line">        re.push_back(curnode -&gt; val);     // 根</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;int&gt; postorderTraversal(TreeNode* root)</span><br><span class="line">    &#123;</span><br><span class="line">        vector&lt;int&gt; result;</span><br><span class="line">        traversal(root, result);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="二叉树的层序遍历"><a href="#二叉树的层序遍历" class="headerlink" title="二叉树的层序遍历"></a>二叉树的层序遍历</h4><p>规则是若树为空，则空操作返回，否则从树的第一层，也就是根结点开始访问，从上而下逐层遍历，在同一层中，按从左到右的顺序对结点逐个访问。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// 采用队列的方式实现二叉树的层序遍历</span><br><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; levelOrder(TreeNode* root) </span><br><span class="line">    &#123;</span><br><span class="line">        vector&lt;vector&lt;int&gt;&gt; result;</span><br><span class="line">        queue&lt;TreeNode*&gt; quetree;    </span><br><span class="line">        if(root != nullptr) quetree.push(root);</span><br><span class="line">        while(!quetree.empty())    // 队列不为空</span><br><span class="line">        &#123;</span><br><span class="line">            int size = quetree.size();</span><br><span class="line">            vector&lt;int&gt; re;     // 存放每一层的结果</span><br><span class="line">            for(int i = 0; i &lt; size; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Treenode* node = quetree.front();</span><br><span class="line">                quetree.pop();</span><br><span class="line">                re.push_back(node -&gt; val);</span><br><span class="line">                if(node -&gt; left) quetree.push(node -&gt; left);</span><br><span class="line">                if(node -&gt; right) quetree.push(node -&gt; right);</span><br><span class="line">            &#125;</span><br><span class="line">            result.push_back(re);</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>两个二叉树遍历的性质：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">已知前序遍历序列和中序遍历序列，可以唯一确定一棵二叉树。</span><br><span class="line">已知后序遍历序列和中序遍历序列，可以唯一确定一棵二叉树。</span><br></pre></td></tr></table></figure><h2 id="2022年3月23日刷题笔记"><a href="#2022年3月23日刷题笔记" class="headerlink" title="2022年3月23日刷题笔记"></a>2022年3月23日刷题笔记</h2><h3 id="二叉树的前序遍历、中序遍历、后序遍历的统一迭代法"><a href="#二叉树的前序遍历、中序遍历、后序遍历的统一迭代法" class="headerlink" title="二叉树的前序遍历、中序遍历、后序遍历的统一迭代法"></a>二叉树的前序遍历、中序遍历、后序遍历的统一迭代法</h3><p>采用栈实现二叉树的前中后序的迭代遍历<br>迭代过程中有两个操作：（1）处理，将元素放进result数组中；（2）访问，遍历节点<br>为解决访问节点和处理节点不一致的问题，将访问的节点放入栈中，将要处理的节点也放入栈中（用空指针标记）。</p><h4 id="中序遍历：左中右→栈：右中左"><a href="#中序遍历：左中右→栈：右中左" class="headerlink" title="中序遍历：左中右→栈：右中左"></a>中序遍历：左中右→栈：右中左</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if(node -&gt; right) stack.push(node -&gt; right);</span><br><span class="line">stack.push(node);</span><br><span class="line">stack.push(nullptr);</span><br><span class="line">if(node -&gt; left) stack.push(node -&gt; left); </span><br></pre></td></tr></table></figure><h4 id="前序遍历：中左右→栈：右左中"><a href="#前序遍历：中左右→栈：右左中" class="headerlink" title="前序遍历：中左右→栈：右左中"></a>前序遍历：中左右→栈：右左中</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if(node -&gt; right) stack.push(node -&gt; right);</span><br><span class="line">if(node -&gt; left) stack.push(node -&gt; left); </span><br><span class="line">stack.push(node);</span><br><span class="line">stack.push(nullptr);</span><br></pre></td></tr></table></figure><h4 id="后序遍历：左右中→栈：中右左"><a href="#后序遍历：左右中→栈：中右左" class="headerlink" title="后序遍历：左右中→栈：中右左"></a>后序遍历：左右中→栈：中右左</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">stack.push(node);</span><br><span class="line">stack.push(nullptr);</span><br><span class="line">if(node -&gt; right) stack.push(node -&gt; right);</span><br><span class="line">if(node -&gt; left) stack.push(node -&gt; left); </span><br></pre></td></tr></table></figure><h3 id="二叉树的层序遍历（广度优先遍历）"><a href="#二叉树的层序遍历（广度优先遍历）" class="headerlink" title="二叉树的层序遍历（广度优先遍历）"></a>二叉树的层序遍历（广度优先遍历）</h3><p>队列先进先出，符合一层一层遍历的逻辑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">queue&lt;TreeNode*&gt; que;</span><br><span class="line">vector&lt;vector&lt;int&gt;&gt; result;</span><br><span class="line">if(root != nullptr) que.push(root);</span><br><span class="line">while(!que.empty())</span><br><span class="line">&#123;</span><br><span class="line">    int size = que.size();</span><br><span class="line">    vector&lt;int&gt; vec;</span><br><span class="line">    for(int i = 0; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        TreeNode* node = que.front();</span><br><span class="line">        que.pop();</span><br><span class="line">        vec.push_back(node -&gt; val);</span><br><span class="line">        if(node -&gt; left) que.push(node -&gt; left); // 左边压入队列</span><br><span class="line">        if(node -&gt; right) que.push(node -&gt; right);  // 右边压入队列</span><br><span class="line">    &#125;</span><br><span class="line">    result.push_back(vec);    // 每一层放入vector</span><br><span class="line">&#125;</span><br><span class="line">// 返回result</span><br></pre></td></tr></table></figure><h3 id="二叉树的层序遍历II"><a href="#二叉树的层序遍历II" class="headerlink" title="二叉树的层序遍历II"></a>二叉树的层序遍历II</h3><p>先采用二叉树的层序遍历，再reverse一下</p><h3 id="二叉树的右视图"><a href="#二叉树的右视图" class="headerlink" title="二叉树的右视图"></a>二叉树的右视图</h3><p>和层序遍历的逻辑差不多，将每一层的数据存入队列，把每一次队列中的最优一个元素保存至vector</p><h3 id="二叉树的层平均值"><a href="#二叉树的层平均值" class="headerlink" title="二叉树的层平均值"></a>二叉树的层平均值</h3><p>和层序遍历的逻辑差不多，将每一层的数据求和，再除以size，得到均值，保存至vector</p><h2 id="2022年3月24日刷题笔记"><a href="#2022年3月24日刷题笔记" class="headerlink" title="2022年3月24日刷题笔记"></a>2022年3月24日刷题笔记</h2><h3 id="N叉树的层序遍历"><a href="#N叉树的层序遍历" class="headerlink" title="N叉树的层序遍历"></a>N叉树的层序遍历</h3><p>与二叉树的层序遍历方法一样，采用队列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">for(int i = 0; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line">    Node* node = que.front();</span><br><span class="line">    que.pop();</span><br><span class="line">    vec.push_back(node -&gt; val);</span><br><span class="line">    for(int j = 0; i &lt; node -&gt; children.size(); j++)  // 因为是N叉树，不是左右节点</span><br><span class="line">    &#123;</span><br><span class="line">        que.push(node -&gt; children[j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="在每个树中找最大值"><a href="#在每个树中找最大值" class="headerlink" title="在每个树中找最大值"></a>在每个树中找最大值</h3><p>二叉树层序遍历的应用，定义一个int用来存放最大值，采用条件语句判断每一层的最大值，将最大值放入队列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int maxint = INT_MIN;</span><br><span class="line">maxint = (node -&gt; val) &gt; maxint ? (node -&gt; val) : maxint;</span><br></pre></td></tr></table></figure><h3 id="填充每个节点的下一个右侧节点指针"><a href="#填充每个节点的下一个右侧节点指针" class="headerlink" title="填充每个节点的下一个右侧节点指针"></a>填充每个节点的下一个右侧节点指针</h3><p>根据题意：每一层的最后一个节点的next指针指向nullptr<br>         定义两个指针nodePre和node<br>         首先取出每一层的头节点(nodePre)，将头节点的next指针指向该层的第二个节点(node)，再另nodePre指向第二个节点（nodePre &#x3D; nodePre -&gt; next)，以此类推，不断更新，直至尾节点</p><h3 id="填充每个节点的下一个右侧节点指针II"><a href="#填充每个节点的下一个右侧节点指针II" class="headerlink" title="填充每个节点的下一个右侧节点指针II"></a>填充每个节点的下一个右侧节点指针II</h3><p>和上一题的区别：不是完美二叉树 但是方法一样</p><h3 id="二叉树的最大深度"><a href="#二叉树的最大深度" class="headerlink" title="二叉树的最大深度"></a>二叉树的最大深度</h3><p>就是二叉树的层序遍历，每遍历一层，将定义的depth加1</p><h3 id="二叉树的最小深度"><a href="#二叉树的最小深度" class="headerlink" title="二叉树的最小深度"></a>二叉树的最小深度</h3><p>考虑左右节点都为空的时候，即是最低层，输出此时的depth</p><h2 id="2022年3月25日刷题笔记"><a href="#2022年3月25日刷题笔记" class="headerlink" title="2022年3月25日刷题笔记"></a>2022年3月25日刷题笔记</h2><h3 id="翻转二叉树"><a href="#翻转二叉树" class="headerlink" title="翻转二叉树"></a>翻转二叉树</h3><p>将每个节点的左右分支进行翻转，达到整体翻转的目的。<br>采用层序遍历的方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">for(int i = 0; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line">    TreeNode* node = que.front();</span><br><span class="line">    que.pop();</span><br><span class="line">    swap(node -&gt; left, node -&gt; right);</span><br><span class="line">    if(node -&gt; left) que.push(node -&gt; left);</span><br><span class="line">    if(node -&gt; right) que.push(node -&gt; right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对称二叉树：检查是否是轴对称"><a href="#对称二叉树：检查是否是轴对称" class="headerlink" title="对称二叉树：检查是否是轴对称"></a>对称二叉树：检查是否是轴对称</h3><p>需要比较的并不是左右节点，需要比较的是根节点的左分支和右分支是不是相互翻转的→左分支的遍历顺序是左右中，右分支的遍历顺序是右左中<br>递归：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 首先排除左右分支是空节点的情况</span><br><span class="line">if(left == nullptr &amp;&amp; right == nullptr) return true;</span><br><span class="line">else if(left == nullprt &amp;&amp; right != nullptr) return false;</span><br><span class="line">else if(left != nullptr &amp;&amp; right == nullptr) return false;</span><br><span class="line">// 然后排除左右分支节点不相同的情况</span><br><span class="line">else if(left -&gt; val != right -&gt; val) return false;</span><br><span class="line">// 左右分支节点都不为空，且数值相同</span><br><span class="line">bool first = compare(left -&gt; left, right -&gt; right);</span><br><span class="line">bool second = compare(left -&gt; right, right -&gt; left);</span><br><span class="line">return first &amp;&amp; second;</span><br></pre></td></tr></table></figure><h3 id="相同的树"><a href="#相同的树" class="headerlink" title="相同的树"></a>相同的树</h3><p>需要比较两个树，与对称二叉树需要比较的一样都是树，不同点在于该题是：左分支与左分支比较，右分支与右分支比较。</p><h3 id="另一棵树的子树"><a href="#另一棵树的子树" class="headerlink" title="另一棵树的子树"></a>另一棵树的子树</h3><p>两个树相等或该树的左树是子树或该树的右树是子树。</p><h2 id="2022年3月26日刷题笔记"><a href="#2022年3月26日刷题笔记" class="headerlink" title="2022年3月26日刷题笔记"></a>2022年3月26日刷题笔记</h2><h3 id="N叉树的最大深度"><a href="#N叉树的最大深度" class="headerlink" title="N叉树的最大深度"></a>N叉树的最大深度</h3><p>题目描述：给定一个N叉树，找到最大深度。最大深度是指从根节点到最远叶子节点的最长路路径上的节点总数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// 迭代法，层序遍历的方式，采用队列</span><br><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    int maxDepth(Node* root)</span><br><span class="line">    &#123;</span><br><span class="line">        queue&lt;Node*&gt; que;    </span><br><span class="line">        if(root != nullptr) que.push(root);</span><br><span class="line">        int depth = 0;</span><br><span class="line">        while(!que.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            int size = que.size();     </span><br><span class="line">            for(int i = 0; i &lt; size; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Node* node = que.front();</span><br><span class="line">                que.pop();</span><br><span class="line">                for(int j = 0; j &lt; node -&gt; children.size(); j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    if(node -&gt; children[j]) que.push(node -&gt; children[j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            depth++;</span><br><span class="line">        &#125;</span><br><span class="line">        retutn depth</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="完全二叉树的节点个数"><a href="#完全二叉树的节点个数" class="headerlink" title="完全二叉树的节点个数"></a>完全二叉树的节点个数</h3><p>题目描述：给你一棵完全二叉树的根节点root，求出该树的节点个数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 采用层序遍历的方式</span><br><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    int countNodes(TreeNode* root)</span><br><span class="line">    &#123;</span><br><span class="line">        queue&lt;TreeNode*&gt; que;</span><br><span class="line">        if(root != nullptr) que.push(root);</span><br><span class="line">        while(!que.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            int size = que.size();</span><br><span class="line">            for(int i = 0; i &lt; size; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                TreeNode* node = que.front();</span><br><span class="line">                que.pop();</span><br><span class="line">                count++;</span><br><span class="line">                if(node -&gt; left) que.push(node -&gt; left);</span><br><span class="line">                if(node -&gt; right) que.push(node -&gt; right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2022年3月27日刷题笔记"><a href="#2022年3月27日刷题笔记" class="headerlink" title="2022年3月27日刷题笔记"></a>2022年3月27日刷题笔记</h2><h3 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h3><p>题目描述：给定一个二叉树，判断它是否是高度平衡的二叉树。本题中，一棵高度平衡二叉树定义为：一个二叉树每个结点的左右子树的高度差的绝对值不超过1.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// 递归法</span><br><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    int getHeight(TreeNode* node)  // 返回以该结点为根结点的二叉树的高度，如果不是平衡二叉树，没必要输出高度，直接返回-1</span><br><span class="line">    &#123;</span><br><span class="line">        if(node == nullptr) return 0;    // 以当前结点为根结点的树高度为0</span><br><span class="line">        int leftheight = getHeight(node -&gt; left);  </span><br><span class="line">        int rightheight = getHeight(node -&gt; right);</span><br><span class="line"></span><br><span class="line">        int result;</span><br><span class="line">        if(abs(leftheight - rightheight) &gt; 1)  // 高度差大于1</span><br><span class="line">        &#123;</span><br><span class="line">            return -1;    // 不是平衡二叉树，返回-1</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            result = 1 + max(leftheight, rightheight);</span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">        if(leftheight == -1) return -1;</span><br><span class="line">        if(rightheight == -1) return -1;</span><br><span class="line"></span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    bool isBalanced(TreeNode* root)</span><br><span class="line">    &#123;</span><br><span class="line">        return getHeight(root) == -1 ? false : true;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="二叉树的所有路径"><a href="#二叉树的所有路径" class="headerlink" title="二叉树的所有路径"></a>二叉树的所有路径</h3><p>题目描述：给你一个二叉树的根结点root，按任意顺序，返回所有从根结点到叶子结点（没有子结点的结点）的路径。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">// 递归的方式，采用前序遍历：中左右，便于路径的统计</span><br><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    void getPath(TreeNode* curnode, vector&lt;int&gt;&amp; path, vector&lt;string&gt;&amp; re)</span><br><span class="line">    &#123;</span><br><span class="line">        path.push_back(curnode -&gt; val);  // 记录根结点的值</span><br><span class="line">        if(curnode -&gt; left == nullptr &amp;&amp; curnode -&gt; right == nullptr)  // 当前结点是叶子结点</span><br><span class="line">        &#123;</span><br><span class="line">            string spath;   // 存储单个路径</span><br><span class="line">            int len = path.size() - 1;</span><br><span class="line">            for(int i = 0; i &lt; len; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                spath += to_string(path[i]);</span><br><span class="line">                spath += &quot;-&gt;&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">            spath += to_string(path[len]);</span><br><span class="line">            re.push_back(spath);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        if(curnode -&gt; left) </span><br><span class="line">        &#123;</span><br><span class="line">            getPath(curnode -&gt; left, path, re);</span><br><span class="line">            path.pop_back();   // 删除结点，便于后序加入新的结点</span><br><span class="line">        &#125;</span><br><span class="line">        if(curnode -&gt; right)</span><br><span class="line">        &#123;</span><br><span class="line">            getPath(curnode -&gt; right, path, re);</span><br><span class="line">            path.pop_back();   // 删除结点，便于后序加入新的结点</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;string&gt; binaryTreePaths(TreeNode* root)</span><br><span class="line">    &#123;</span><br><span class="line">        vector&lt;string&gt; result;</span><br><span class="line">        if(root == nullptr) return result;</span><br><span class="line">        vector&lt;int&gt; path;</span><br><span class="line">        getPath(root, path, result);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="左叶子之和"><a href="#左叶子之和" class="headerlink" title="左叶子之和"></a>左叶子之和</h3><p>题目描述：给定二叉树的根节点root，返回所有左叶子之和</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">// 递归法：遍历一遍二叉树，找到左叶子结点，累加它们的值</span><br><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    int sum = 0;</span><br><span class="line">    void getSum(TreeNode* curnode)</span><br><span class="line">    &#123;</span><br><span class="line">        if(curnode == nullptr) return;    </span><br><span class="line">        // 当前结点是左叶子结点 求和</span><br><span class="line">        if((curnode -&gt; left != nullptr) &amp;&amp; (curnode -&gt; left -&gt; left == nullptr) &amp;&amp; (curnode -&gt; left -&gt; right == nullptr))</span><br><span class="line">        &#123;</span><br><span class="line">            sum += curnode -&gt; left -&gt; val;</span><br><span class="line">        &#125;</span><br><span class="line">        getSum(curnode -&gt; left);   // 左子树左叶子之和</span><br><span class="line">        getSum(curnode -&gt; right);  // 右子树左叶子之和</span><br><span class="line">    &#125;</span><br><span class="line">    int sumOfLeftLeaves(TreeNode* root)</span><br><span class="line">    &#123;</span><br><span class="line">        getSum(root);</span><br><span class="line">        return sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 迭代法</span><br><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    int sumOfLeftLeaves(TreeNode* root)</span><br><span class="line">    &#123;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        if(root == nullptr) return 0;</span><br><span class="line">        st.push(root);</span><br><span class="line">        int sum = 0;</span><br><span class="line">        while(!st.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode* node = st.top();</span><br><span class="line">            st.pop();</span><br><span class="line">            if((node -&gt; left != nullptr) &amp;&amp; (node -&gt; left -&gt; left == nullptr) &amp;&amp; (node -&gt; left -&gt; right == nullptr))</span><br><span class="line">            &#123;</span><br><span class="line">                sum += node -&gt; left -&gt; val;</span><br><span class="line">            &#125;</span><br><span class="line">            if(node -&gt; left) st.push(node -&gt; left);</span><br><span class="line">            if(node -&gt; right) st.push(node -&gt; right);</span><br><span class="line">        &#125;</span><br><span class="line">        return sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2022年3月28日刷题笔记"><a href="#2022年3月28日刷题笔记" class="headerlink" title="2022年3月28日刷题笔记"></a>2022年3月28日刷题笔记</h2><h3 id="找树左下角的值"><a href="#找树左下角的值" class="headerlink" title="找树左下角的值"></a>找树左下角的值</h3><p>题目描述：给定一个二叉树的根结点root，请找到该二叉树的最底层最左边结点的值。假设二叉树中至少有一个结点。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 采用层序遍历的方法</span><br><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    int findBottomLeftValue(TreeNode* root)</span><br><span class="line">    &#123;</span><br><span class="line">        queue&lt;TreeNode*&gt; que;</span><br><span class="line">        if(root != nullptr) que.push(root);</span><br><span class="line">        int result = 0;</span><br><span class="line">        while(!que.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            int size = que.size();</span><br><span class="line">            for(int i = 0; i &lt; size; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                TreeNode* curnode = que.front();</span><br><span class="line">                que.pop();</span><br><span class="line">                if(curnode -&gt; left) que.push(curnode -&gt; left);</span><br><span class="line">                if(curnode -&gt; right) que.push(curnode -&gt; right);</span><br><span class="line">                if(i == 0) result = curnode -&gt; val;    // 最左边结点的值</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="路径总和"><a href="#路径总和" class="headerlink" title="路径总和"></a>路径总和</h3><p>题目描述：给你二叉树的根结点root和一个目标和的整数targetSum。判断该树中是否存在根结点到叶子结点的路径，这条路径上所有结点值相加等于目标和targetSum。如果存在，返回true;否咋，返回false。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// 采用递归的方法实现</span><br><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    bool getPath(TreeNode* curnode, int pathsum)</span><br><span class="line">    &#123;</span><br><span class="line">        // 当前结点为叶子结点，且pathsum = 0,返回true</span><br><span class="line">        if(curnode -&gt; left == nullptr &amp;&amp; curnode -&gt; right == nullptr &amp;&amp; pathsum == 0) return true;</span><br><span class="line">        // 当前结点为叶子结点，并没有找到合适的路径，返回false</span><br><span class="line">        if(curnode -&gt; left == nullptr &amp;&amp; curnode -&gt; right == nullptr) return false;</span><br><span class="line">        if(curnode -&gt; left != nullptr)   // 遍历左子树</span><br><span class="line">        &#123;</span><br><span class="line">            pathsum -= curnode -&gt; left -&gt; val;  </span><br><span class="line">            if(getPath(curnode -&gt; left, pathsum)) return true;</span><br><span class="line">            pathsum += curnode -&gt; left -&gt; val;   // 没找到，则撤销之前的操作</span><br><span class="line">        &#125;</span><br><span class="line">        if(curnode -&gt; right != nullptr)  // 遍历右子树</span><br><span class="line">        &#123;</span><br><span class="line">            pathsum -= curnode -&gt; right -&gt; val;</span><br><span class="line">            if(getPath(curnode -&gt; right, pathsum)) return true;</span><br><span class="line">            pathsum += curnode -&gt; right -&gt; val;   // 没找到，则撤销之前的操作</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    bool hasPsthSum(TreeNode* root, int targetSum)</span><br><span class="line">    &#123;</span><br><span class="line">        if(root == nullptr) return false;</span><br><span class="line">        return getPath(root, targetSum - root -&gt; val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="路径总和II"><a href="#路径总和II" class="headerlink" title="路径总和II"></a>路径总和II</h3><p>题目描述：给你二叉树的根结点root和一个整数目标和targetSum，找出所有从根结点到叶子结点路径总和等于给定目标和的路径。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">// 采用递归的方法，考虑采用上一题的思路</span><br><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; getPath(TreeNode* curnode, vector&lt;int&gt;&amp; path, vector&lt;vector&lt;int&gt;&gt;&amp; result, int sum)</span><br><span class="line">    &#123;</span><br><span class="line">        // 找到叶子结点，并找到合适的边</span><br><span class="line">        if(curnode -&gt; left == nullptr &amp;&amp; curnode -&gt; right == nullptr &amp;&amp; sum == 0)</span><br><span class="line">        &#123;</span><br><span class="line">            result.push_back(path);</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">        // 找到叶子结点，没找到合适的边</span><br><span class="line">        if(curnode -&gt; left == nullptr &amp;&amp; curnode -&gt; right == nullptr)</span><br><span class="line">        &#123;</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">        if(curnode -&gt; left != nullptr)  // 遍历左子树</span><br><span class="line">        &#123;</span><br><span class="line">            path.push_back(curnode -&gt; left -&gt; val);</span><br><span class="line">            sum -= curnode -&gt; left -&gt; val;</span><br><span class="line">            getPath(curnode -&gt; left, path, result, sum);</span><br><span class="line">            sum += curnode -&gt; left -&gt; val;    // 没找到，撤销操作</span><br><span class="line">            path.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">        if(curnode -&gt; right != nullptr)  // 遍历右子树</span><br><span class="line">        &#123;</span><br><span class="line">            path.push_back(curnode -&gt; right -&gt; val);</span><br><span class="line">            sum -= curnode -&gt; right -&gt; val;</span><br><span class="line">            getPath(curnode -&gt; right, path, result, sum);</span><br><span class="line">            sum += curnode -&gt; right -&gt; val;   // 没找到，撤销操作</span><br><span class="line">            path.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; pathSum(TreeNode* root, int targetSum)</span><br><span class="line">    &#123;</span><br><span class="line">        vector&lt;vector&lt;int&gt;&gt; result;</span><br><span class="line">        vector&lt;int&gt; path;</span><br><span class="line">        if(root == nullptr) return result;</span><br><span class="line">        path.push_back(root -&gt; val);</span><br><span class="line">        return getPath(root, path, result, targetSum - root -&gt; val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2022年3月29日刷题记录"><a href="#2022年3月29日刷题记录" class="headerlink" title="2022年3月29日刷题记录"></a>2022年3月29日刷题记录</h2><h3 id="从中序与后序遍历序列构造二叉树"><a href="#从中序与后序遍历序列构造二叉树" class="headerlink" title="从中序与后序遍历序列构造二叉树"></a>从中序与后序遍历序列构造二叉树</h3><p>题目描述：给定两个整数数组inorder和postorder，其中inorder是二叉树的中序遍历,postorder是同一棵树的后序遍历，请你构造并返回这棵二叉树。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    TreeNode* build(vector&lt;int&gt;&amp; inorder, vector&lt;int&gt;&amp; postorder)</span><br><span class="line">    &#123;</span><br><span class="line">        if(postorder.size() == 0) return nullptr;  // 如果数组大小为0，说明是空节点</span><br><span class="line">        int rootint = postorder[postorder.size() - 1]; // 后序数组的最后一个元素为根结点</span><br><span class="line">        TreeNode* root = new TreeNode(rootint);</span><br><span class="line">        if(postorder.size() == 1) return root;    // 遇到叶子结点，递归终止</span><br><span class="line">        int divideindex;</span><br><span class="line">        for(divideindex = 0; divideindex &lt; inorder.size(); divideindex++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(inorder[divideindex] == rootint) break;</span><br><span class="line">        &#125;</span><br><span class="line">        // 切割中序数组，得到中序左数组和中序右数组</span><br><span class="line">        vector&lt;int&gt; leftinorder(inorder.begin(), inorder.begin() + divideindex);</span><br><span class="line">        vector&lt;int&gt; rightinorder(inorder.begin() + divideindex + 1, inorder.end());</span><br><span class="line">        // 后序数组的尺寸调整</span><br><span class="line">        postorder.resize(postorder.size() - 1);</span><br><span class="line">        // 切割后序数组，得到后序左数组和后序右数组</span><br><span class="line">        vector&lt;int&gt; leftpostorder(postorder.begin(), postorder.begin() + leftinorder.size());</span><br><span class="line">        vector&lt;int&gt; rightpostorder(postorder.begin() + leftinorder.size(), postorder.end());</span><br><span class="line">        // 递归处理</span><br><span class="line">        root -&gt; left = buile(leftinorder, leftpostorder);</span><br><span class="line">        root -&gt; right = build(rightinorder, rightpostorder);</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode* buildTree(vector&lt;int&gt;&amp; inorder, vector&lt;int&gt;&amp; postorder)</span><br><span class="line">    &#123;</span><br><span class="line">        if(inorder.size() == 0 || postorder.size() == 0) return nullptr;</span><br><span class="line">        return build(inorder, postorder);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="从前序和中序遍历序列构造二叉树"><a href="#从前序和中序遍历序列构造二叉树" class="headerlink" title="从前序和中序遍历序列构造二叉树"></a>从前序和中序遍历序列构造二叉树</h3><p>题目描述：给定两个数组preorder和inorder，其中preorder是二叉树的前序遍历，inorder是同一棵树的中序遍历，请构造二叉树并返回其根结点。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// 注意边界条件</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    TreeNode* build(vector&lt;int&gt;&amp; preorder, vector&lt;int&gt;&amp; inorder)</span><br><span class="line">    &#123;</span><br><span class="line">        if(preorder.size() == 0) return nullptr;</span><br><span class="line">        int rootint = preorder[0];</span><br><span class="line">        TreeNode* root = new TreeNode(rootint);</span><br><span class="line">        if(preorder.size() == 1) return root;   // 遇到叶子结点，返回root</span><br><span class="line">        int divideindex;</span><br><span class="line">        for(divideindex = 0; divideindex &lt; inorder.size(); divideindex++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(inorder[divideindex] == rootint) break;</span><br><span class="line">        &#125;</span><br><span class="line">        // 分割中序数组</span><br><span class="line">        vector&lt;int&gt; leftinorder(inorder.begin(), inorder.begin() + divideindex);</span><br><span class="line">        vector&lt;int&gt; rightinorder(inorder.begin() + divideindex + 1, inorder.end());</span><br><span class="line">        // 分割前序数组</span><br><span class="line">        vector&lt;int&gt; leftpreorder(preorder.begin() + 1, preorder.begin() + 1 + leftinorder.size());</span><br><span class="line">        vector&lt;int&gt; rightpreorder(preorder.begin() + 1 + leftinorder.size(), preorder.end());</span><br><span class="line">        // 递归处理</span><br><span class="line">        root -&gt; left = build(leftpreorder, leftinorder);</span><br><span class="line">        root -&gt; right = build(rightpreorder, rightinorder);</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode* buildTree(vector&lt;int&gt;&amp; preorder, vector&lt;int&gt;&amp; inorder) </span><br><span class="line">    &#123;</span><br><span class="line">        if(preorder.size() == 0 || inorder.size() == 0) return nullptr;</span><br><span class="line">        return build(preorder, inorder);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="最大二叉树"><a href="#最大二叉树" class="headerlink" title="最大二叉树"></a>最大二叉树</h3><p>题目描述：给定一个不重复的整数数组nums，最大二叉树可以用下面的算法从nums递归地构建：<br>1、创建一个根结点，其值为nums中的最大值；<br>2、递归地在最大值左边的子数组前缀上构建左子树；<br>3、递归地在最大值右边的子数组后缀上构建右子树。<br>返回nums构建的最大二叉树。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">// 采用递归的方法：</span><br><span class="line">// 1、确定递归的参数和返回类型：输入参数是存放元素的数组,返回该数组构建的二叉树的头结点</span><br><span class="line">// 2、确定终止条件：传入的数组的size为1,构建至叶子结点</span><br><span class="line">// 3、确定单层递归的逻辑：首先找到数组中的最大值和对应的下标，最大的值构建根结点，下标用于分割数组</span><br><span class="line">                     // 最大值所在的下标的左区间构建左子树</span><br><span class="line">                     // 最大值所在的下标的右区间构建右子树</span><br><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    TreeNode* constructMaximumBinaryTree(vector&lt;int&gt;&amp; nums)</span><br><span class="line">    &#123;</span><br><span class="line">        TreeNode* curnode = new TreeNode(0);</span><br><span class="line">        if(nums.size() == 1)</span><br><span class="line">        &#123;</span><br><span class="line">            curnode -&gt; val = nums[0];</span><br><span class="line">            return curnode;</span><br><span class="line">        &#125;</span><br><span class="line">        // 找到数组中的最大值及其对应的下标</span><br><span class="line">        int maxint = 0;</span><br><span class="line">        int maxintindex = 0;</span><br><span class="line">        for(int i = 0; i &lt; nums.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(nums[i] &gt; maxint)</span><br><span class="line">            &#123;</span><br><span class="line">                maxint = nums[i];</span><br><span class="line">                maxintindex = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        curnode -&gt; val = maxint;  // 将最大值做为根结点</span><br><span class="line">        if(maxintindex &gt; 0)  // 保证左区间至少有一个值</span><br><span class="line">        &#123;</span><br><span class="line">            vector&lt;int&gt; leftvec(nums.begin(), nums.begin() + maxintindex);  // 构建新的数组处理左子树</span><br><span class="line">            curnode -&gt; left = constructMaximumBinaryTree(leftvec);</span><br><span class="line">        &#125;</span><br><span class="line">        if(maxintindex &lt; (nums.size() - 1))  // 保证右区间至少有一个值</span><br><span class="line">        &#123;</span><br><span class="line">            vector&lt;int&gt; rightvec(nums.begin() + maxintindex + 1, nums.end());  // 构建新的数组处理右子树</span><br><span class="line">            curnode -&gt; right = constructMaximumBinaryTree(rightvec);</span><br><span class="line">        &#125;</span><br><span class="line">        return curnode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="合并二叉树"><a href="#合并二叉树" class="headerlink" title="合并二叉树"></a>合并二叉树</h3><p>题目描述：给你两棵二叉树：root1和root2。想象一下：当其中一棵树覆盖到另一棵上时，两棵树上的一些结点将会重叠（而另一些不会）。你需要将这两棵树合并为一棵新二叉树，合并的规则是：如果两个结点重叠，那么将这两个结点的值相加做为合并后结点的新值；否则，不为null的结点将直接做为新的二叉树的结点。返回合并后的二叉树。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">// 采用迭代法</span><br><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2)</span><br><span class="line">    &#123;</span><br><span class="line">        if(root1 == nullptr) return root2;</span><br><span class="line">        if(root2 == nullptr) return root1;</span><br><span class="line">        queue&lt;TreeNode*&gt; que1;</span><br><span class="line">        queue&lt;TreeNode*&gt; que2;</span><br><span class="line">        que1.push(root1);</span><br><span class="line">        que2.push(root2);</span><br><span class="line">        while(!que1.empty() || !que2.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode* node1 = que1.front();</span><br><span class="line">            que1.pop();</span><br><span class="line">            TreeNode* node2 = que2.front();</span><br><span class="line">            que2.pop();</span><br><span class="line">            node1 -&gt; val += node2 -&gt; val;</span><br><span class="line">            // 两棵树的左结点都不为空</span><br><span class="line">            if(node1 -&gt; left != nullptr &amp;&amp; node2 -&gt; left != nullptr)</span><br><span class="line">            &#123;</span><br><span class="line">                que1.push(node1 -&gt; left);</span><br><span class="line">                que2.push(node2 -&gt; left);</span><br><span class="line">            &#125;</span><br><span class="line">            // 两棵树的右结点都不为空</span><br><span class="line">            if(node1 -&gt; right != nullptr &amp;&amp; node2 -&gt; right != nullptr)</span><br><span class="line">            &#123;</span><br><span class="line">               que1.push(node1 -&gt; right);</span><br><span class="line">               que2.push(node2 -&gt; right);</span><br><span class="line">            &#125;</span><br><span class="line">            if(node1 -&gt; left == nullptr &amp;&amp; node2 -&gt; left != nullptr)</span><br><span class="line">            &#123;</span><br><span class="line">                node1 -&gt; left = node2 -&gt; left;</span><br><span class="line">            &#125;</span><br><span class="line">            if(node1 -&gt; right == nullptr &amp;&amp; node2 -&gt; right != nullptr)</span><br><span class="line">            &#123;</span><br><span class="line">               node1 -&gt; right = node2 -&gt; right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return root1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2022年3月30日刷题笔记"><a href="#2022年3月30日刷题笔记" class="headerlink" title="2022年3月30日刷题笔记"></a>2022年3月30日刷题笔记</h2><h3 id="二叉搜索树中的搜索"><a href="#二叉搜索树中的搜索" class="headerlink" title="二叉搜索树中的搜索"></a>二叉搜索树中的搜索</h3><p>题目描述：给定二叉搜索树（BST）的根结点root和一个整数值val。你需要在BST中找到节点值等于val的结点。返回以该结点为根的子树。如果结点不存在，返回null。<br>二叉搜索树的特点：<br>(1)若它的左子树不为空，则左子树上所有结点的值均小于它的根结点的值；<br>(2)若它的右子树不为空，则右子树上所有结点的值均大于它的根结点的值；<br>(3)它的左右子树也分别是二叉搜索树。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// 递归法</span><br><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    TreeNode* searchBST(TreeNode* root, int val)</span><br><span class="line">    &#123;</span><br><span class="line">        if(root == nullptr || root -&gt; val == val) return root;   // 递归的终止条件</span><br><span class="line">        if(root -&gt; val &gt; val) return searchBST(root -&gt; left, val);      // 二叉搜索树的特点</span><br><span class="line">        if(root -&gt; val &lt; val) return searchBST(root -&gt; right, val);</span><br><span class="line">        return nullptr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">// 迭代法</span><br><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    TreeNode* searchBST(TreeNode* root, int val)</span><br><span class="line">    &#123;</span><br><span class="line">        while(root != nullptr)</span><br><span class="line">        &#123;</span><br><span class="line">            if(root -&gt; val == val) return root;</span><br><span class="line">            else if(root -&gt; val &gt; val) root = root -&gt; left;</span><br><span class="line">            else root = root -&gt; right;</span><br><span class="line">        &#125;</span><br><span class="line">        return nullptr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="验证二叉搜索树"><a href="#验证二叉搜索树" class="headerlink" title="验证二叉搜索树"></a>验证二叉搜索树</h3><p>题目描述：给你一个二叉树的根结点root，判断其是否是一个有效的二叉搜索树：<br>有效二叉搜索树定义如下：结点的左子树只包含小于当前结点的数；结点的右子树只包含大于当前结点的数；所有左子树和右子树自身必须也是二叉搜索树。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    // 首先中序遍历，将二叉搜索树变为有序数组</span><br><span class="line">    vector&lt;int&gt; vec;</span><br><span class="line">    void traversal(TreeNode* root)</span><br><span class="line">    &#123;</span><br><span class="line">        if(root == nullptr) return;</span><br><span class="line">        traversal(root -&gt; left);</span><br><span class="line">        vec.push_back(root -&gt; val);</span><br><span class="line">        traversal(root -&gt; right);</span><br><span class="line">    &#125;</span><br><span class="line">    bool isValidBST(TreeNode* root)</span><br><span class="line">    &#123;</span><br><span class="line">        vec.clear();</span><br><span class="line">        traversal(root);</span><br><span class="line">        // 比较数组是否有序</span><br><span class="line">        for(int i = 0; i &lt; vec.size() - 1; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(vec[i] &gt;= vec[i + 1]) return false;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="二叉搜索树的最小绝对差"><a href="#二叉搜索树的最小绝对差" class="headerlink" title="二叉搜索树的最小绝对差"></a>二叉搜索树的最小绝对差</h3><p>题目描述：给你一个二叉搜索树的根结点root，返回树中任意两个不同结点值之间的最小差值。差值是一个正数，其数值等于两值之差的绝对值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    // 首先中序遍历，将二叉搜索树转换为有序数组</span><br><span class="line">    vector&lt;int&gt; vec;</span><br><span class="line">    void traversal(TreeNode* root)</span><br><span class="line">    &#123;</span><br><span class="line">        if(root == nullptr) return;</span><br><span class="line">        traversal(root -&gt; left);</span><br><span class="line">        vec.push_back(root -&gt; val);</span><br><span class="line">        traversal(root -&gt; right);</span><br><span class="line">    &#125;</span><br><span class="line">    int getMinimumDifference(TreeNode* root)</span><br><span class="line">    &#123;</span><br><span class="line">        vec.clear();</span><br><span class="line">        traversal(root);</span><br><span class="line">        int result = INT_MAX;</span><br><span class="line">        // 比较差值大小</span><br><span class="line">        for(int i = 0; i &lt; vec.size() - 1; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            result = min(result, vec[i + 1] - vec[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">// 一边遍历一边比较</span><br><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    int result = INT_MAX;</span><br><span class="line">    TreeNode* prenode;</span><br><span class="line">    void traversal(TreeNode* curnode)</span><br><span class="line">    &#123;</span><br><span class="line">        if(curnode == nullptr) return;</span><br><span class="line">        traversal(curnode -&gt; left);   // 左</span><br><span class="line">        if(prenode != nullptr)</span><br><span class="line">        &#123;</span><br><span class="line">            result = min(result, curnode -&gt; val - prenode -&gt; val); // 中</span><br><span class="line">        &#125;</span><br><span class="line">        prenode = curnode;    // 更新prenode</span><br><span class="line">        traversal(curnode -&gt; right);  // 右</span><br><span class="line">    &#125;</span><br><span class="line">    int getMinimumDifference(TreeNode* root)</span><br><span class="line">    &#123;</span><br><span class="line">        traversal(root);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="二叉搜索树中的众数"><a href="#二叉搜索树中的众数" class="headerlink" title="二叉搜索树中的众数"></a>二叉搜索树中的众数</h3><p>题目描述：给你一个含重复值的二叉搜索树（BST）的根结点root，找出并返回BST中所有的众数（即：出现频数最高的元素）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">// 递归法</span><br><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    int maxcount = 0;// 最高频率</span><br><span class="line">    int count = 0;   // 统计频率</span><br><span class="line">    TreeNode* prenode = nullptr;</span><br><span class="line">    vector&lt;int&gt; result;</span><br><span class="line">    void find(TreeNode* curnode)</span><br><span class="line">    &#123;</span><br><span class="line">        if(curnode == nullptr) return;</span><br><span class="line">        find(curnode -&gt; left);   // 左</span><br><span class="line">        if(prenode == nullptr) count = 1;  // 第一个结点，将count至为1</span><br><span class="line">        else if(prenode -&gt; val == curnode -&gt; val) count++;</span><br><span class="line">        else count = 1;   // 与前一个结点数字不同</span><br><span class="line">        prenode = curnode; // 更新prenode</span><br><span class="line">        if(count == maxcount)</span><br><span class="line">        &#123;</span><br><span class="line">            result.push_back(curnode -&gt; val);</span><br><span class="line">        &#125;</span><br><span class="line">        if(count &gt; maxcount)   // 找到频率更高的数</span><br><span class="line">        &#123;</span><br><span class="line">            maxcount = count;</span><br><span class="line">            result.clear();</span><br><span class="line">            result.push_back(curnode -&gt; val);</span><br><span class="line">        &#125;</span><br><span class="line">        find(curnode -&gt; right);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;int&gt; findMode(TreeNode* root)</span><br><span class="line">    &#123;</span><br><span class="line">        result.clear();</span><br><span class="line">        find(root);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">// 迭代法</span><br><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; findMode(TreeNode* root)</span><br><span class="line">    &#123;</span><br><span class="line">        int maxcount = 0;</span><br><span class="line">        int count = 0;</span><br><span class="line">        TreeNode* prenode = nullptr;</span><br><span class="line">        TreeNode* curnode = root;</span><br><span class="line">        vector&lt;int&gt; result;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        while(curnode != nullptr || !st.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            if(curnode != nullptr)</span><br><span class="line">            &#123;</span><br><span class="line">                st.push(curnode);   // 将访问的结点放入栈中</span><br><span class="line">                curnode = curnode -&gt; left; </span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                curnode = st.top();</span><br><span class="line">                st.pop();</span><br><span class="line">                if(prenode == nullptr) count = 1;  // 第一个结点</span><br><span class="line">                else if(prenode -&gt; val == curnode -&gt; val) count++;</span><br><span class="line">                else count = 1;</span><br><span class="line">                if(count == maxcount)</span><br><span class="line">                &#123;</span><br><span class="line">                    result.push_back(curnode -&gt; val);</span><br><span class="line">                &#125;</span><br><span class="line">                if(count &gt; maxcount)</span><br><span class="line">                &#123;</span><br><span class="line">                    maxcount = count;</span><br><span class="line">                    result.clear();</span><br><span class="line">                    result.push_back(curnode -&gt; val);</span><br><span class="line">                &#125;</span><br><span class="line">                prenode = curnode;</span><br><span class="line">                curnode = curnode -&gt; right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2022年3月31日刷题笔记"><a href="#2022年3月31日刷题笔记" class="headerlink" title="2022年3月31日刷题笔记"></a>2022年3月31日刷题笔记</h2><h3 id="二叉搜索树与双向链表"><a href="#二叉搜索树与双向链表" class="headerlink" title="二叉搜索树与双向链表"></a>二叉搜索树与双向链表</h3><p>题目描述：输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">// 解法一：</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    // 中序遍历，二叉搜索树变为有序链表</span><br><span class="line">    TreeNode *prenode;</span><br><span class="line">    TreeNode *result;</span><br><span class="line">    void traversal(TreeNode* curnode)</span><br><span class="line">    &#123;</span><br><span class="line">        if(curnode == nullptr)  return;</span><br><span class="line">        traversal(curnode -&gt; left);  // 左</span><br><span class="line">        if(prenode == nullptr) result = curnode;</span><br><span class="line">        else prenode -&gt; right = curnode; // 前一个结点指向当前结点</span><br><span class="line">        curnode -&gt; left = prenode;  // 当前结点指向前一个结点</span><br><span class="line">        prenode = curnode;  // 更新结点</span><br><span class="line">        traversal(curnode -&gt; right); // 右</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode* Convert(TreeNode* root) </span><br><span class="line">    &#123;</span><br><span class="line">        if(root == nullptr) return root;</span><br><span class="line">        traversal(root);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">// 解法二：</span><br><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;TreeNode*&gt; result;</span><br><span class="line">    // 中序遍历，将二叉搜索树变为有序数组</span><br><span class="line">    void traversal(TreeNode* curnode)</span><br><span class="line">    &#123;</span><br><span class="line">        if(curnode == nullptr) return;</span><br><span class="line">        traversal(curnode -&gt; left);</span><br><span class="line">        result.push_back(curnode);</span><br><span class="line">        traversal(curnode -&gt; right);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode* Convert(TreeNode* root)</span><br><span class="line">    &#123;</span><br><span class="line">        if(root == nullptr) return root;</span><br><span class="line">        traversal(root);</span><br><span class="line">        for(int i = 0; i &lt; result.size() - 1; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            result[i] -&gt; right = result[i + 1];</span><br><span class="line">            result[i + 1] -&gt; left = result[i];</span><br><span class="line">        &#125;</span><br><span class="line">        return result[0];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="二叉树的最近公共祖先"><a href="#二叉树的最近公共祖先" class="headerlink" title="二叉树的最近公共祖先"></a>二叉树的最近公共祖先</h3><p>题目描述：给定一个二叉树，找到该树中两个指定结点的最近公共祖先。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    // 后序遍历：左 右 中 从下往上遍历</span><br><span class="line">    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q)</span><br><span class="line">    &#123;</span><br><span class="line">        if(root == nullptr || root == p || root == q) return root;</span><br><span class="line">        TreeNode* left = lowestCommonAncestor(root -&gt; left, p, q);  // 左</span><br><span class="line">        TreeNode* right = lowestCommonAncestor(root -&gt; right, p, q);  //右</span><br><span class="line">        // 中间结点</span><br><span class="line">        if(left != nullptr &amp;&amp; right != nullptr) return root;</span><br><span class="line">        else if(left == nullptr &amp;&amp; right != nullptr) return right;</span><br><span class="line">        else if(left != nullptr &amp;&amp; right == nullptr) return left;</span><br><span class="line">        else return nullptr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="二叉搜索树中的插入操作"><a href="#二叉搜索树中的插入操作" class="headerlink" title="二叉搜索树中的插入操作"></a>二叉搜索树中的插入操作</h3><p>题目描述：给定二叉搜索树（BST）的根结点root和要插入树中的值value，将值插入二叉搜索树，返回插入后二叉搜索树的根结点。输入数据保证，新的值和院士二叉搜索树中的任意结点值都不同。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 递归法</span><br><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    TreeNode* insertIntoBST(TreeNode* root, int val)</span><br><span class="line">    &#123;</span><br><span class="line">        if(root == nullptr)</span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode* node = new TreeNode(val);</span><br><span class="line">            return node;</span><br><span class="line">        &#125;</span><br><span class="line">        // 当前值大于val，val需要插入左子树</span><br><span class="line">        if(root -&gt; val &gt; val) root -&gt; left = insertIntoBST(root -&gt; left, val);</span><br><span class="line">        // 当前值小于val，val需要插入右子树</span><br><span class="line">        if(root -&gt; val &lt; val) root -&gt; right =insertIntoBST(root -&gt; right, val);</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="删除二叉搜索树中的节点"><a href="#删除二叉搜索树中的节点" class="headerlink" title="删除二叉搜索树中的节点"></a>删除二叉搜索树中的节点</h3><p>题目描述：给定一个二叉搜索树的根节点 root 和一个值 key，删除二叉搜索树中的key对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">// 首先找到需要删除的key的结点位置</span><br><span class="line">// 然后删除它</span><br><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    TreeNode* deleteNode(TreeNode* root, int key)</span><br><span class="line">    &#123;</span><br><span class="line">        if(root == nullptr) return root;  // 没找到key，遍历至空结点返回</span><br><span class="line">        if(root -&gt; val == key)   // 找到key</span><br><span class="line">        &#123;</span><br><span class="line">            // 找到key，且该结点为叶子结点，直接删除，并返回nullptr为根结点</span><br><span class="line">            if(root -&gt; left == nullptr &amp;&amp; root -&gt; right == nullptr) </span><br><span class="line">            &#123;</span><br><span class="line">                delete root;    // 释放结点内存</span><br><span class="line">                return nullptr;</span><br><span class="line">            &#125;</span><br><span class="line">            // 找到key，且该结点的左孩子为空，右孩子不为空，将右孩子补位至被删除的结点，返回右孩子为根结点</span><br><span class="line">            else if(root -&gt; left == nullptr)</span><br><span class="line">            &#123;</span><br><span class="line">                auto retNode = root -&gt; right;</span><br><span class="line">                delete root;</span><br><span class="line">                return retNode;</span><br><span class="line">            &#125;</span><br><span class="line">            // 找到key，且结点右孩子为空，左孩子不为空，将左孩子补位至被删除的结点，返回左孩子为根结点</span><br><span class="line">            else if(root -&gt; right == nullptr)</span><br><span class="line">            &#123;</span><br><span class="line">                auto retNode = root -&gt; left;</span><br><span class="line">                delete root;</span><br><span class="line">                return retNode;</span><br><span class="line">            &#125;</span><br><span class="line">            // 找到key，且左右孩子都不为空，将被删除结点的左孩子放在被删除结点的右孩子的最左边，并返回右孩子为根结点</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                TreeNode* curnode = root -&gt; right;  //找到右子树的最左边</span><br><span class="line">                while(curnode -&gt; left != nullptr)</span><br><span class="line">                &#123;</span><br><span class="line">                    curnode = curnode -&gt; left;</span><br><span class="line">                &#125;</span><br><span class="line">                curnode -&gt; left = root -&gt; left;   // 将被删除结点的左孩子放在被删除结点的右孩子的最左边</span><br><span class="line">                TreeNode* temp = root;</span><br><span class="line">                root = root -&gt; right;             // 返回root结点的右孩子做为根结点</span><br><span class="line">                delete temp;</span><br><span class="line">                return root;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(root -&gt; val &gt; key) root -&gt; left = deleteNode(root -&gt; left, key);</span><br><span class="line">        if(root -&gt; val &lt; key) root -&gt; right = deleteNode(root -&gt; right, key);</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="修剪二叉搜索树"><a href="#修剪二叉搜索树" class="headerlink" title="修剪二叉搜索树"></a>修剪二叉搜索树</h3><p>题目描述：给你二叉搜索树的根节点 root ，同时给定最小边界low 和最大边界 high。通过修剪二叉搜索树，使得所有节点的值在[low, high]中。修剪树 不应该改变保留在树中的元素的相对结构，即，如果没有被移除，原有的父代子代关系都应当保留)。 可以证明，存在唯一的答案。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    TreeNode* trimBST(TreeNode* root, int low, int high)</span><br><span class="line">    &#123;</span><br><span class="line">        if(root == nullptr) return root;   // 遍历至空结点，均未超出界限</span><br><span class="line">        // 当前结点小于low，则其左子树均小于low，直接返回右子树</span><br><span class="line">        if(root -&gt; val &lt; low)</span><br><span class="line">        &#123;</span><br><span class="line">            return trimBST(root -&gt; right, low, high);</span><br><span class="line">        &#125;</span><br><span class="line">        // 当前结点大于high，则其右子树均大于high，直接返回左子树</span><br><span class="line">        if(root -&gt; val &gt; high)</span><br><span class="line">        &#123;</span><br><span class="line">            return trimBST(root -&gt; left, low, high);</span><br><span class="line">        &#125;</span><br><span class="line">        root -&gt; left = trimBST(root -&gt; left, low, high);</span><br><span class="line">        root -&gt; right = trimBST(root -&gt; right, low, high);</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="将有序数组转换为二叉搜索树"><a href="#将有序数组转换为二叉搜索树" class="headerlink" title="将有序数组转换为二叉搜索树"></a>将有序数组转换为二叉搜索树</h3><p>题目描述：给你一个整数数组nums ，其中元素已经按升序排列，请你将其转换为一棵高度平衡二叉搜索树。高度平衡二叉树是一棵满足每个节点的左右两个子树的高度差的绝对值不超过1的二叉树。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 递归法</span><br><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    TreeNode* traversal(vector&lt;int&gt;&amp; nums, int left, int right)</span><br><span class="line">    &#123;</span><br><span class="line">        if(left &gt; right) return nullptr;</span><br><span class="line">        int middle = left + ((right - left) / 2);</span><br><span class="line">        TreeNode* node = new TreeNode(nums[middle]);</span><br><span class="line">        node -&gt; left = traversal(nums, left, middle - 1);</span><br><span class="line">        node -&gt; right = traversal(nums, middle + 1, right);</span><br><span class="line">        return node;</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode* sortedArrayToBST(vector&lt;int&gt;&amp; nums)</span><br><span class="line">    &#123;</span><br><span class="line">        return traversal(nums, 0, nums.size() - 1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="把二叉搜索树转换为累加树"><a href="#把二叉搜索树转换为累加树" class="headerlink" title="把二叉搜索树转换为累加树"></a>把二叉搜索树转换为累加树</h3><p>题目描述：给出二叉搜索树的根节点，该树的节点值各不相同，请你将其转换为累加树（Greater Sum Tree），使每个节点node的新值等于原树中大于或等于node.val的值之和。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 观察示例1 从右子树的叶子结点开始累加</span><br><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    int sum = 0;</span><br><span class="line">    void traversal(TreeNode* curnode)</span><br><span class="line">    &#123;</span><br><span class="line">        if(curnode == nullptr) return;</span><br><span class="line">        // 至右子树的最底部</span><br><span class="line">        traversal(curnode -&gt; right);</span><br><span class="line">        // 值累加</span><br><span class="line">        sum += curnode -&gt; val;  </span><br><span class="line">        traversal(curnode -&gt; left);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode* convertBST(TreeNode* root)</span><br><span class="line">    &#123;</span><br><span class="line">        traversal(root);</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
